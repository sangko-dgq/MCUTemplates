C251 COMPILER V5.60.0,  STC32G_NVIC                                                        29/04/22  16:40:32  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE STC32G_NVIC
OBJECT MODULE PLACED IN .\Objects\STC32G_NVIC.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE Sources\Driver\src\STC32G_NVIC.c XSMALL FUNCTIONS(REENTRANT) OPTIMIZE(
                    -4,SPEED) BROWSE INCDIR(.\Sources\User;.\Sources\User\include;.\Sources\FreeRTOS\include;.\Sources\FreeRTOS\portable\STC3
                    -2G12K128;.\Sources\Driver\inc;.\Sources\Task\inc) DEBUG PRINT(.\Listings\STC32G_NVIC.lst) OBJECT(.\Objects\STC32G_NVIC.o
                    -bj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          #include "STC32G_NVIC.h"
   14          #include "STC32G_PWM.h"
   15          #include "STC32G_CAN.h"
   16          
   17          //========================================================================
   18          // 函数: NVIC_Timer0_Init
   19          // 描述: Timer0嵌套向量中断控制器初始化.
   20          // 参数: State:    中断使能状态, ENABLE/DISABLE.
   21          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
   22          // 返回: 执行结果 SUCCESS/FAIL.
   23          // 版本: V1.0, 2020-09-29
   24          //========================================================================
   25          uint8_t NVIC_Timer0_Init(uint8_t State, uint8_t Priority)
   26          {
   27   1              if(State <= ENABLE) Timer0_Interrupt(State); else  return FAIL;
   28   1              if(Priority <= Priority_3) Timer0_Priority(Priority); else  return FAIL;
   29   1              return SUCCESS;
   30   1      }
   31          
   32          //========================================================================
   33          // 函数: NVIC_Timer1_Init
   34          // 描述: Timer1嵌套向量中断控制器初始化.
   35          // 参数: State:    中断使能状态, ENABLE/DISABLE.
   36          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
   37          // 返回: 执行结果 SUCCESS/FAIL.
   38          // 版本: V1.0, 2020-09-29
   39          //========================================================================
   40          uint8_t NVIC_Timer1_Init(uint8_t State, uint8_t Priority)
   41          {
   42   1              if(State <= ENABLE) Timer1_Interrupt(State); else  return FAIL;
   43   1              if(Priority <= Priority_3) Timer1_Priority(Priority); else  return FAIL;
   44   1              return SUCCESS;
   45   1      }
   46          
   47          //========================================================================
   48          // 函数: NVIC_Timer2_Init
   49          // 描述: Timer2嵌套向量中断控制器初始化.
   50          // 参数: State:    中断使能状态, ENABLE/DISABLE.
   51          // 参数: Priority: 中断优先级, 0.
   52          // 返回: 执行结果 SUCCESS/FAIL.
   53          // 版本: V1.0, 2020-09-29
   54          //========================================================================
   55          uint8_t NVIC_Timer2_Init(uint8_t State, uint8_t Priority)
   56          {
C251 COMPILER V5.60.0,  STC32G_NVIC                                                        29/04/22  16:40:32  PAGE 2   

   57   1              if(State <= ENABLE) Timer2_Interrupt(State); else  return FAIL;
   58   1              Priority = 0;
   59   1              return SUCCESS;
   60   1      }
   61          
   62          //========================================================================
   63          // 函数: NVIC_Timer3_Init
   64          // 描述: Timer3嵌套向量中断控制器初始化.
   65          // 参数: State:    中断使能状态, ENABLE/DISABLE.
   66          // 参数: Priority: 中断优先级, 0.
   67          // 返回: 执行结果 SUCCESS/FAIL.
   68          // 版本: V1.0, 2020-09-29
   69          //========================================================================
   70          uint8_t NVIC_Timer3_Init(uint8_t State, uint8_t Priority)
   71          {
   72   1              if(State <= ENABLE) Timer3_Interrupt(State); else  return FAIL;
   73   1              Priority = 0;
   74   1              return SUCCESS;
   75   1      }
   76          
   77          //========================================================================
   78          // 函数: NVIC_Timer4_Init
   79          // 描述: Timer4嵌套向量中断控制器初始化.
   80          // 参数: State:    中断使能状态, ENABLE/DISABLE.
   81          // 参数: Priority: 中断优先级, NULL.
   82          // 返回: 执行结果 SUCCESS/FAIL.
   83          // 版本: V1.0, 2020-09-29
   84          //========================================================================
   85          uint8_t NVIC_Timer4_Init(uint8_t State, uint8_t Priority)
   86          {
   87   1              if(State <= ENABLE) Timer4_Interrupt(State); else  return FAIL;
   88   1              Priority = 0;
   89   1              return SUCCESS;
   90   1      }
   91          
   92          //========================================================================
   93          // 函数: NVIC_INT0_Init
   94          // 描述: INT0嵌套向量中断控制器初始化.
   95          // 参数: State:    中断使能状态, ENABLE/DISABLE.
   96          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
   97          // 返回: 执行结果 SUCCESS/FAIL.
   98          // 版本: V1.0, 2020-09-29
   99          //========================================================================
  100          uint8_t NVIC_INT0_Init(uint8_t State, uint8_t Priority)
  101          {
  102   1              if(State <= ENABLE) INT0_Interrupt(State); else  return FAIL;
  103   1              if(Priority <= Priority_3) INT0_Priority(Priority); else  return FAIL;
  104   1              return SUCCESS;
  105   1      }
  106          
  107          //========================================================================
  108          // 函数: NVIC_INT1_Init
  109          // 描述: INT1嵌套向量中断控制器初始化.
  110          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  111          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  112          // 返回: 执行结果 SUCCESS/FAIL.
  113          // 版本: V1.0, 2020-09-29
  114          //========================================================================
  115          uint8_t NVIC_INT1_Init(uint8_t State, uint8_t Priority)
  116          {
  117   1              if(State <= ENABLE) INT1_Interrupt(State); else  return FAIL;
  118   1              if(Priority <= Priority_3) INT1_Priority(Priority); else  return FAIL;
  119   1              return SUCCESS;
  120   1      }
  121          
  122          //========================================================================
C251 COMPILER V5.60.0,  STC32G_NVIC                                                        29/04/22  16:40:32  PAGE 3   

  123          // 函数: NVIC_INT2_Init
  124          // 描述: INT2嵌套向量中断控制器初始化.
  125          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  126          // 参数: Priority: 中断优先级, 0.
  127          // 返回: 执行结果 SUCCESS/FAIL.
  128          // 版本: V1.0, 2020-09-29
  129          //========================================================================
  130          uint8_t NVIC_INT2_Init(uint8_t State, uint8_t Priority)
  131          {
  132   1              if(State <= ENABLE) INT2_Interrupt(State); else  return FAIL;
  133   1              Priority = 0;
  134   1              return SUCCESS;
  135   1      }
  136          
  137          //========================================================================
  138          // 函数: NVIC_INT3_Init
  139          // 描述: INT3嵌套向量中断控制器初始化.
  140          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  141          // 参数: Priority: 中断优先级, 0.
  142          // 返回: 执行结果 SUCCESS/FAIL.
  143          // 版本: V1.0, 2020-09-29
  144          //========================================================================
  145          uint8_t NVIC_INT3_Init(uint8_t State, uint8_t Priority)
  146          {
  147   1              if(State <= ENABLE) INT3_Interrupt(State); else  return FAIL;
  148   1              Priority = 0;
  149   1              return SUCCESS;
  150   1      }
  151          
  152          //========================================================================
  153          // 函数: NVIC_INT4_Init
  154          // 描述: INT4嵌套向量中断控制器初始化.
  155          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  156          // 参数: Priority: 中断优先级, 0.
  157          // 返回: 执行结果 SUCCESS/FAIL.
  158          // 版本: V1.0, 2020-09-29
  159          //========================================================================
  160          uint8_t NVIC_INT4_Init(uint8_t State, uint8_t Priority)
  161          {
  162   1              if(State <= ENABLE) INT4_Interrupt(State); else  return FAIL;
  163   1              Priority = 0;
  164   1              return SUCCESS;
  165   1      }
  166          
  167          //========================================================================
  168          // 函数: NVIC_ADC_Init
  169          // 描述: ADC嵌套向量中断控制器初始化.
  170          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  171          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  172          // 返回: 执行结果 SUCCESS/FAIL.
  173          // 版本: V1.0, 2020-09-29
  174          //========================================================================
  175          uint8_t NVIC_ADC_Init(uint8_t State, uint8_t Priority)
  176          {
  177   1              if(State <= ENABLE) ADC_Interrupt(State); else  return FAIL;
  178   1              if(Priority <= Priority_3) ADC_Priority(Priority); else  return FAIL;
  179   1              return SUCCESS;
  180   1      }
  181          
  182          //========================================================================
  183          // 函数: NVIC_CMP_Init
  184          // 描述: 比较器嵌套向量中断控制器初始化.
  185          // 参数: State:    中断使能状态, RISING_EDGE/FALLING_EDGE/DISABLE.
  186          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  187          // 返回: 执行结果 SUCCESS/FAIL.
  188          // 版本: V1.0, 2020-09-29
C251 COMPILER V5.60.0,  STC32G_NVIC                                                        29/04/22  16:40:32  PAGE 4   

  189          //========================================================================
  190          uint8_t NVIC_CMP_Init(uint8_t State, uint8_t Priority)
  191          {
  192   1              if(State & RISING_EDGE) PIE = 1;                        //允许上升沿中断
  193   1              else    PIE = 0;                        //禁止上升沿中断
  194   1              if(State & FALLING_EDGE)        NIE = 1;                //允许下降沿中断
  195   1              else    NIE = 0;                        //禁止上升沿中断
  196   1              if(Priority <= Priority_3) CMP_Priority(Priority); else  return FAIL;
  197   1              return SUCCESS;
  198   1      }
  199          
  200          //========================================================================
  201          // 函数: NVIC_I2C_Init
  202          // 描述: I2C嵌套向量中断控制器初始化.
  203          // 参数: Mode:     模式, I2C_Mode_Master/I2C_Mode_Slave.
  204          // 参数: State:    中断使能状态, I2C_Mode_Master: ENABLE/DISABLE.
  205          //                              I2C_Mode_Slave: I2C_ESTAI/I2C_ERXI/I2C_ETXI/I2C_ESTOI/DISABLE.
  206          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  207          // 返回: 执行结果 SUCCESS/FAIL.
  208          // 版本: V1.0, 2020-09-29
  209          //========================================================================
  210          uint8_t NVIC_I2C_Init(uint8_t Mode, uint8_t State, uint8_t Priority)
  211          {
  212   1              if(Mode > 1) return FAIL;
  213   1              if(Mode == 1)   //I2C_Mode_Master
  214   1              {
  215   2                      I2C_Master_Inturrupt(State);
  216   2              }
  217   1              else if(Mode == 0)      //I2C_Mode_Slave
  218   1              {
  219   2                      I2CSLCR = (I2CSLCR & ~0x78) | State;
  220   2              }
  221   1              if(Priority <= Priority_3) CMP_Priority(Priority); else  return FAIL;
  222   1              return SUCCESS;
  223   1      }
  224          
  225          //========================================================================
  226          // 函数: NVIC_UART1_Init
  227          // 描述: UART1嵌套向量中断控制器初始化.
  228          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  229          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  230          // 返回: 执行结果 SUCCESS/FAIL.
  231          // 版本: V1.0, 2020-09-29
  232          //========================================================================
  233          uint8_t NVIC_UART1_Init(uint8_t State, uint8_t Priority)
  234          {
  235   1              if(State <= ENABLE) UART1_Interrupt(State); else  return FAIL;
  236   1              if(Priority <= Priority_3) UART1_Priority(Priority); else  return FAIL;
  237   1              return SUCCESS;
  238   1      }
  239          
  240          //========================================================================
  241          // 函数: NVIC_UART2_Init
  242          // 描述: UART2嵌套向量中断控制器初始化.
  243          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  244          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  245          // 返回: 执行结果 SUCCESS/FAIL.
  246          // 版本: V1.0, 2020-09-29
  247          //========================================================================
  248          uint8_t NVIC_UART2_Init(uint8_t State, uint8_t Priority)
  249          {
  250   1              if(State <= ENABLE) UART2_Interrupt(State); else  return FAIL;
  251   1              if(Priority <= Priority_3) UART2_Priority(Priority); else  return FAIL;
  252   1              return SUCCESS;
  253   1      }
  254          
C251 COMPILER V5.60.0,  STC32G_NVIC                                                        29/04/22  16:40:32  PAGE 5   

  255          //========================================================================
  256          // 函数: NVIC_UART3_Init
  257          // 描述: UART3嵌套向量中断控制器初始化.
  258          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  259          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  260          // 返回: 执行结果 SUCCESS/FAIL.
  261          // 版本: V1.0, 2020-09-29
  262          //========================================================================
  263          uint8_t NVIC_UART3_Init(uint8_t State, uint8_t Priority)
  264          {
  265   1              if(State <= ENABLE) UART3_Interrupt(State); else  return FAIL;
  266   1              if(Priority <= Priority_3) UART3_Priority(Priority); else  return FAIL;
  267   1              return SUCCESS;
  268   1      }
  269          
  270          //========================================================================
  271          // 函数: NVIC_UART4_Init
  272          // 描述: UART4嵌套向量中断控制器初始化.
  273          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  274          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  275          // 返回: 执行结果 SUCCESS/FAIL.
  276          // 版本: V1.0, 2020-09-29
  277          //========================================================================
  278          uint8_t NVIC_UART4_Init(uint8_t State, uint8_t Priority)
  279          {
  280   1              if(State <= ENABLE) UART4_Interrupt(State); else  return FAIL;
  281   1              if(Priority <= Priority_3) UART4_Priority(Priority); else  return FAIL;
  282   1              return SUCCESS;
  283   1      }
  284          
  285          //========================================================================
  286          // 函数: NVIC_SPI_Init
  287          // 描述: SPI嵌套向量中断控制器初始化.
  288          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  289          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  290          // 返回: 执行结果 SUCCESS/FAIL.
  291          // 版本: V1.0, 2020-09-29
  292          //========================================================================
  293          uint8_t NVIC_SPI_Init(uint8_t State, uint8_t Priority)
  294          {
  295   1              if(State <= ENABLE) SPI_Interrupt(State); else  return FAIL;
  296   1              if(Priority <= Priority_3) SPI_Priority(Priority); else  return FAIL;
  297   1              return SUCCESS;
  298   1      }
  299          
  300          //========================================================================
  301          // 函数: NVIC_RTC_Init
  302          // 描述: SPI嵌套向量中断控制器初始化.
  303          // 参数: State:    中断使能状态, 中断使能, 0x80:闹钟中断, 0x40:日中断, 0x20:小时中断, 0x10:分钟中断, 0x08
             -:秒中断, 0x04:1/2秒中断, 0x02:1/8秒中断, 0x01:1/32秒中断 /DISABLE.
  304          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  305          // 返回: 执行结果 SUCCESS/FAIL.
  306          // 版本: V1.0, 2020-09-29
  307          //========================================================================
  308          uint8_t NVIC_RTC_Init(uint8_t State, uint8_t Priority)
  309          {
  310   1              if(Priority <= Priority_3) RTC_Priority(Priority); else  return FAIL;
  311   1              RTC_Interrupt(State); 
  312   1              return SUCCESS;
  313   1      }
  314          
  315          //========================================================================
  316          // 函数: NVIC_PWM_Init
  317          // 描述: PWM嵌套向量中断控制器初始化.
  318          // 参数: Channel:  通道, PWMA/PWMB.
  319          // 参数: State:    中断使能状态, PWM_BIE/PWM_TIE/PWM_COMIE/PWM_CC8IE~PWM_CC1IE/PWM_UIE/DISABLE.
C251 COMPILER V5.60.0,  STC32G_NVIC                                                        29/04/22  16:40:32  PAGE 6   

  320          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  321          // 返回: 执行结果 SUCCESS/FAIL.
  322          // 版本: V1.0, 2020-09-29
  323          //========================================================================
  324          uint8_t NVIC_PWM_Init(uint8_t Channel, uint8_t State, uint8_t Priority)
  325          {
  326   1              if(Channel > PWMB) return FAIL;
  327   1              if(Priority > Priority_3) return FAIL;
  328   1              switch(Channel)
  329   1              {
  330   2                      case PWMA:
  331   2                              PWMA_IER = State;
  332   2                              PWMA_Priority(Priority);
  333   2                      break;
  334   2      
  335   2                      case PWMB:
  336   2                              PWMB_IER = State;
  337   2                              PWMB_Priority(Priority);
  338   2                      break;
  339   2      
  340   2                      default:
  341   2                              PWMB_IER = State;
  342   2                              Priority = 0;
  343   2                      break;
  344   2              }
  345   1              return SUCCESS;
  346   1      }
  347          
  348          //========================================================================
  349          // 函数: NVIC_DMA_ADC_Init
  350          // 描述: DMA ADC嵌套向量中断控制器初始化.
  351          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  352          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  353          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  354          // 返回: 执行结果 SUCCESS/FAIL.
  355          // 版本: V1.0, 2021-05-21
  356          //========================================================================
  357          uint8_t NVIC_DMA_ADC_Init(uint8_t State, uint8_t Priority, uint8_t Bus_Priority)
  358          {
  359   1              DMA_ADC_CFG &= ~0x0f;
  360   1              if(Priority <= Priority_3) DMA_ADC_CFG |= Priority << 2;
  361   1              if(Bus_Priority <= Priority_3) DMA_ADC_CFG |= Bus_Priority;     //数据总线访问优先级
  362   1              if(State == ENABLE)
  363   1                      DMA_ADC_CFG |= 0x80;            //bit7 1:Enable Interrupt
  364   1              else
  365   1                      DMA_ADC_CFG &= ~0x80;           //bit7 0:Disable Interrupt
  366   1              return SUCCESS;
  367   1      }
  368          
  369          //========================================================================
  370          // 函数: NVIC_DMA_M2M_Init
  371          // 描述: DMA M2M嵌套向量中断控制器初始化.
  372          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  373          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  374          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  375          // 返回: 执行结果 SUCCESS/FAIL.
  376          // 版本: V1.0, 2021-05-21
  377          //========================================================================
  378          uint8_t NVIC_DMA_M2M_Init(uint8_t State, uint8_t Priority, uint8_t Bus_Priority)
  379          {
  380   1              DMA_M2M_CFG &= ~0x0f;
  381   1              if(Priority <= Priority_3) DMA_M2M_CFG |= Priority << 2;
  382   1              if(Bus_Priority <= Priority_3) DMA_M2M_CFG |= Bus_Priority;     //数据总线访问优先级
  383   1              if(State == ENABLE)
  384   1                      DMA_M2M_CFG |= 0x80;            //bit7 1:Enable Interrupt
  385   1              else
C251 COMPILER V5.60.0,  STC32G_NVIC                                                        29/04/22  16:40:32  PAGE 7   

  386   1                      DMA_M2M_CFG &= ~0x80;           //bit7 0:Disable Interrupt
  387   1              return SUCCESS;
  388   1      }
  389          
  390          //========================================================================
  391          // 函数: NVIC_DMA_SPI_Init
  392          // 描述: DMA SPI嵌套向量中断控制器初始化.
  393          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  394          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  395          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  396          // 返回: 执行结果 SUCCESS/FAIL.
  397          // 版本: V1.0, 2021-05-27
  398          //========================================================================
  399          uint8_t NVIC_DMA_SPI_Init(uint8_t State, uint8_t Priority, uint8_t Bus_Priority)
  400          {
  401   1              DMA_SPI_CFG &= ~0x0f;
  402   1              if(Priority <= Priority_3) DMA_SPI_CFG |= Priority << 2;
  403   1              if(Bus_Priority <= Priority_3) DMA_SPI_CFG |= Bus_Priority;     //数据总线访问优先级
  404   1              if(State == ENABLE)
  405   1                      DMA_SPI_CFG |= 0x80;            //bit7 1:Enable Interrupt
  406   1              else
  407   1                      DMA_SPI_CFG &= ~0x80;           //bit7 0:Disable Interrupt
  408   1              return SUCCESS;
  409   1      }
  410          
  411          //========================================================================
  412          // 函数: NVIC_DMA_UART1_Tx_Init
  413          // 描述: DMA UART1 Tx嵌套向量中断控制器初始化.
  414          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  415          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  416          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  417          // 返回: 执行结果 SUCCESS/FAIL.
  418          // 版本: V1.0, 2021-05-21
  419          //========================================================================
  420          uint8_t NVIC_DMA_UART1_Tx_Init(uint8_t State, uint8_t Priority, uint8_t Bus_Priority)
  421          {
  422   1              DMA_UR1T_CFG &= ~0x0f;
  423   1              if(Priority <= Priority_3) DMA_UR1T_CFG |= Priority << 2;
  424   1              if(Bus_Priority <= Priority_3) DMA_UR1T_CFG |= Bus_Priority;    //数据总线访问优先级
  425   1              if(State == ENABLE)
  426   1                      DMA_UR1T_CFG |= 0x80;           //bit7 1:Enable Interrupt
  427   1              else
  428   1                      DMA_UR1T_CFG &= ~0x80;  //bit7 0:Disable Interrupt
  429   1              return SUCCESS;
  430   1      }
  431          
  432          //========================================================================
  433          // 函数: NVIC_DMA_UART1_Rx_Init
  434          // 描述: DMA UART1 Rx嵌套向量中断控制器初始化.
  435          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  436          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  437          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  438          // 返回: 执行结果 SUCCESS/FAIL.
  439          // 版本: V1.0, 2021-05-21
  440          //========================================================================
  441          uint8_t NVIC_DMA_UART1_Rx_Init(uint8_t State, uint8_t Priority, uint8_t Bus_Priority)
  442          {
  443   1              DMA_UR1R_CFG &= ~0x0f;
  444   1              if(Priority <= Priority_3) DMA_UR1R_CFG |= Priority << 2;
  445   1              if(Bus_Priority <= Priority_3) DMA_UR1R_CFG |= Bus_Priority;    //数据总线访问优先级
  446   1              if(State == ENABLE)
  447   1                      DMA_UR1R_CFG |= 0x80;           //bit7 1:Enable Interrupt
  448   1              else
  449   1                      DMA_UR1R_CFG &= ~0x80;  //bit7 0:Disable Interrupt
  450   1              return SUCCESS;
  451   1      }
C251 COMPILER V5.60.0,  STC32G_NVIC                                                        29/04/22  16:40:32  PAGE 8   

  452          
  453          //========================================================================
  454          // 函数: NVIC_DMA_UART2_Tx_Init
  455          // 描述: DMA UART2 Tx嵌套向量中断控制器初始化.
  456          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  457          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  458          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  459          // 返回: 执行结果 SUCCESS/FAIL.
  460          // 版本: V1.0, 2021-05-21
  461          //========================================================================
  462          uint8_t NVIC_DMA_UART2_Tx_Init(uint8_t State, uint8_t Priority, uint8_t Bus_Priority)
  463          {
  464   1              DMA_UR2T_CFG &= ~0x0f;
  465   1              if(Priority <= Priority_3) DMA_UR2T_CFG |= Priority << 2;
  466   1              if(Bus_Priority <= Priority_3) DMA_UR2T_CFG |= Bus_Priority;    //数据总线访问优先级
  467   1              if(State == ENABLE)
  468   1                      DMA_UR2T_CFG |= 0x80;           //bit7 1:Enable Interrupt
  469   1              else
  470   1                      DMA_UR2T_CFG &= ~0x80;  //bit7 0:Disable Interrupt
  471   1              return SUCCESS;
  472   1      }
  473          
  474          //========================================================================
  475          // 函数: NVIC_DMA_UART2_Rx_Init
  476          // 描述: DMA UART2 Rx嵌套向量中断控制器初始化.
  477          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  478          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  479          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  480          // 返回: 执行结果 SUCCESS/FAIL.
  481          // 版本: V1.0, 2021-05-21
  482          //========================================================================
  483          uint8_t NVIC_DMA_UART2_Rx_Init(uint8_t State, uint8_t Priority, uint8_t Bus_Priority)
  484          {
  485   1              DMA_UR2R_CFG &= ~0x0f;
  486   1              if(Priority <= Priority_3) DMA_UR2R_CFG |= Priority << 2;
  487   1              if(Bus_Priority <= Priority_3) DMA_UR2R_CFG |= Bus_Priority;    //数据总线访问优先级
  488   1              if(State == ENABLE)
  489   1                      DMA_UR2R_CFG |= 0x80;           //bit7 1:Enable Interrupt
  490   1              else
  491   1                      DMA_UR2R_CFG &= ~0x80;  //bit7 0:Disable Interrupt
  492   1              return SUCCESS;
  493   1      }
  494          
  495          //========================================================================
  496          // 函数: NVIC_DMA_UART3_Tx_Init
  497          // 描述: DMA UART3 Tx嵌套向量中断控制器初始化.
  498          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  499          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  500          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  501          // 返回: 执行结果 SUCCESS/FAIL.
  502          // 版本: V1.0, 2021-05-21
  503          //========================================================================
  504          uint8_t NVIC_DMA_UART3_Tx_Init(uint8_t State, uint8_t Priority, uint8_t Bus_Priority)
  505          {
  506   1              DMA_UR3T_CFG &= ~0x0f;
  507   1              if(Priority <= Priority_3) DMA_UR3T_CFG |= Priority << 2;
  508   1              if(Bus_Priority <= Priority_3) DMA_UR3T_CFG |= Bus_Priority;    //数据总线访问优先级
  509   1              if(State == ENABLE)
  510   1                      DMA_UR3T_CFG |= 0x80;           //bit7 1:Enable Interrupt
  511   1              else
  512   1                      DMA_UR3T_CFG &= ~0x80;  //bit7 0:Disable Interrupt
  513   1              return SUCCESS;
  514   1      }
  515          
  516          //========================================================================
  517          // 函数: NVIC_DMA_UART3_Rx_Init
C251 COMPILER V5.60.0,  STC32G_NVIC                                                        29/04/22  16:40:32  PAGE 9   

  518          // 描述: DMA UART3 Rx嵌套向量中断控制器初始化.
  519          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  520          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  521          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  522          // 返回: 执行结果 SUCCESS/FAIL.
  523          // 版本: V1.0, 2021-05-21
  524          //========================================================================
  525          uint8_t NVIC_DMA_UART3_Rx_Init(uint8_t State, uint8_t Priority, uint8_t Bus_Priority)
  526          {
  527   1              DMA_UR3R_CFG &= ~0x0f;
  528   1              if(Priority <= Priority_3) DMA_UR3R_CFG |= Priority << 2;
  529   1              if(Bus_Priority <= Priority_3) DMA_UR3R_CFG |= Bus_Priority;    //数据总线访问优先级
  530   1              if(State == ENABLE)
  531   1                      DMA_UR3R_CFG |= 0x80;           //bit7 1:Enable Interrupt
  532   1              else
  533   1                      DMA_UR3R_CFG &= ~0x80;  //bit7 0:Disable Interrupt
  534   1              return SUCCESS;
  535   1      }
  536          
  537          //========================================================================
  538          // 函数: NVIC_DMA_UART4_Tx_Init
  539          // 描述: DMA UART4 Tx嵌套向量中断控制器初始化.
  540          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  541          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  542          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  543          // 返回: 执行结果 SUCCESS/FAIL.
  544          // 版本: V1.0, 2021-05-21
  545          //========================================================================
  546          uint8_t NVIC_DMA_UART4_Tx_Init(uint8_t State, uint8_t Priority, uint8_t Bus_Priority)
  547          {
  548   1              DMA_UR4T_CFG &= ~0x0f;
  549   1              if(Priority <= Priority_3) DMA_UR4T_CFG |= Priority << 2;
  550   1              if(Bus_Priority <= Priority_3) DMA_UR4T_CFG |= Bus_Priority;    //数据总线访问优先级
  551   1              if(State == ENABLE)
  552   1                      DMA_UR4T_CFG |= 0x80;           //bit7 1:Enable Interrupt
  553   1              else
  554   1                      DMA_UR4T_CFG &= ~0x80;  //bit7 0:Disable Interrupt
  555   1              return SUCCESS;
  556   1      }
  557          
  558          //========================================================================
  559          // 函数: NVIC_DMA_UART4_Rx_Init
  560          // 描述: DMA UART4 Rx嵌套向量中断控制器初始化.
  561          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  562          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  563          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  564          // 返回: 执行结果 SUCCESS/FAIL.
  565          // 版本: V1.0, 2021-05-21
  566          //========================================================================
  567          uint8_t NVIC_DMA_UART4_Rx_Init(uint8_t State, uint8_t Priority, uint8_t Bus_Priority)
  568          {
  569   1              DMA_UR4R_CFG &= ~0x0f;
  570   1              if(Priority <= Priority_3) DMA_UR4R_CFG |= Priority << 2;
  571   1              if(Bus_Priority <= Priority_3) DMA_UR4R_CFG |= Bus_Priority;    //数据总线访问优先级
  572   1              if(State == ENABLE)
  573   1                      DMA_UR4R_CFG |= 0x80;           //bit7 1:Enable Interrupt
  574   1              else
  575   1                      DMA_UR4R_CFG &= ~0x80;  //bit7 0:Disable Interrupt
  576   1              return SUCCESS;
  577   1      }
  578          
  579          //========================================================================
  580          // 函数: NVIC_DMA_LCM_Init
  581          // 描述: DMA LCM嵌套向量中断控制器初始化.
  582          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  583          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
C251 COMPILER V5.60.0,  STC32G_NVIC                                                        29/04/22  16:40:32  PAGE 10  

  584          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  585          // 返回: 执行结果 SUCCESS/FAIL.
  586          // 版本: V1.0, 2021-05-21
  587          //========================================================================
  588          uint8_t NVIC_DMA_LCM_Init(uint8_t State, uint8_t Priority, uint8_t Bus_Priority)
  589          {
  590   1              DMA_LCM_CFG &= ~0x0f;
  591   1              if(Priority <= Priority_3) DMA_LCM_CFG |= Priority << 2;
  592   1              if(Bus_Priority <= Priority_3) DMA_LCM_CFG |= Bus_Priority;     //数据总线访问优先级
  593   1              if(State == ENABLE)
  594   1                      DMA_LCM_CFG |= 0x80;            //bit7 1:Enable Interrupt
  595   1              else
  596   1                      DMA_LCM_CFG &= ~0x80;           //bit7 0:Disable Interrupt
  597   1              return SUCCESS;
  598   1      }
  599          
  600          //========================================================================
  601          // 函数: NVIC_LCM_Init
  602          // 描述: LCM嵌套向量中断控制器初始化.
  603          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  604          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  605          // 返回: 执行结果 SUCCESS/FAIL.
  606          // 版本: V1.0, 2021-05-21
  607          //========================================================================
  608          uint8_t NVIC_LCM_Init(uint8_t State, uint8_t Priority)
  609          {
  610   1              LCMIFCFG &= ~0x30;
  611   1              if(Priority <= Priority_3) LCMIFCFG |= Priority << 4;
  612   1              if(State == ENABLE)
  613   1                      LCMIFCFG |= 0x80;               //bit7 1:Enable Interrupt
  614   1              else
  615   1                      LCMIFCFG &= ~0x80;              //bit7 0:Disable Interrupt
  616   1              return SUCCESS;
  617   1      }
  618          
  619          //========================================================================
  620          // 函数: NVIC_DMA_I2CT_Init
  621          // 描述: DMA I2C Tx嵌套向量中断控制器初始化.
  622          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  623          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  624          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  625          // 返回: 执行结果 SUCCESS/FAIL.
  626          // 版本: V1.0, 2022-03-25
  627          //========================================================================
  628          uint8_t NVIC_DMA_I2CT_Init(uint8_t State, uint8_t Priority, uint8_t Bus_Priority)
  629          {
  630   1              DMA_I2CT_CFG &= ~0x0f;
  631   1              if(Priority <= Priority_3) DMA_I2CT_CFG |= Priority << 2;
  632   1              if(Bus_Priority <= Priority_3) DMA_I2CT_CFG |= Bus_Priority;    //数据总线访问优先级
  633   1              if(State == ENABLE)
  634   1                      DMA_I2CT_CFG |= 0x80;           //bit7 1:Enable Interrupt
  635   1              else
  636   1                      DMA_I2CT_CFG &= ~0x80;  //bit7 0:Disable Interrupt
  637   1              return SUCCESS;
  638   1      }
  639          
  640          //========================================================================
  641          // 函数: NVIC_DMA_I2CR_Init
  642          // 描述: DMA I2C Rx嵌套向量中断控制器初始化.
  643          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  644          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  645          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  646          // 返回: 执行结果 SUCCESS/FAIL.
  647          // 版本: V1.0, 2022-03-25
  648          //========================================================================
  649          uint8_t NVIC_DMA_I2CR_Init(uint8_t State, uint8_t Priority, uint8_t Bus_Priority)
C251 COMPILER V5.60.0,  STC32G_NVIC                                                        29/04/22  16:40:32  PAGE 11  

  650          {
  651   1              DMA_I2CR_CFG &= ~0x0f;
  652   1              if(Priority <= Priority_3) DMA_I2CR_CFG |= Priority << 2;
  653   1              if(Bus_Priority <= Priority_3) DMA_I2CR_CFG |= Bus_Priority;    //数据总线访问优先级
  654   1              if(State == ENABLE)
  655   1                      DMA_I2CR_CFG |= 0x80;           //bit7 1:Enable Interrupt
  656   1              else
  657   1                      DMA_I2CR_CFG &= ~0x80;  //bit7 0:Disable Interrupt
  658   1              return SUCCESS;
  659   1      }
  660          
  661          //========================================================================
  662          // 函数: NVIC_CAN_Init
  663          // 描述: CAN嵌套向量中断控制器初始化.
  664          // 参数: Channel:  通道, CAN1/CAN2.
  665          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  666          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  667          // 返回: 执行结果 SUCCESS/FAIL.
  668          // 版本: V1.0, 2023-03-27
  669          //========================================================================
  670          uint8_t NVIC_CAN_Init(uint8_t Channel, uint8_t State, uint8_t Priority)
  671          {
  672   1              if(Channel > CAN2) return FAIL;
  673   1              if(Priority > Priority_3) return FAIL;
  674   1              switch(Channel)
  675   1              {
  676   2                      case CAN1:
  677   2                              if(State == ENABLE)
  678   2                                      CANIE = 1;              //bit7 1:Enable Interrupt
  679   2                              else
  680   2                                      CANIE = 0;              //bit7 0:Disable Interrupt
  681   2                              CAN1_Priority(Priority);
  682   2                      break;
  683   2      
  684   2                      case CAN2:
  685   2                              if(State == ENABLE)
  686   2                                      CAN2IE = 1;             //bit7 1:Enable Interrupt
  687   2                              else
  688   2                                      CAN2IE = 0;             //bit7 0:Disable Interrupt
  689   2                              CAN2_Priority(Priority);
  690   2                      break;
  691   2      
  692   2                      default:
  693   2                              return FAIL;
  694   2                      break;
  695   2              }
  696   1              return SUCCESS;
  697   1      }
  698          
  699          //========================================================================
  700          // 函数: NVIC_LIN_Init
  701          // 描述: LIN嵌套向量中断控制器初始化.
  702          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  703          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  704          // 返回: 执行结果 SUCCESS/FAIL.
  705          // 版本: V1.0, 2020-09-29
  706          //========================================================================
  707          uint8_t NVIC_LIN_Init(uint8_t State, uint8_t Priority)
  708          {
  709   1              if(State <= ENABLE) LIN_Interrupt(State); else  return FAIL;
  710   1              if(Priority <= Priority_3) LIN_Priority(Priority); else  return FAIL;
  711   1              return SUCCESS;
  712   1      }
  713          


C251 COMPILER V5.60.0,  STC32G_NVIC                                                        29/04/22  16:40:32  PAGE 12  

Module Information          Static   Overlayable
------------------------------------------------
  code size            =      2794     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
