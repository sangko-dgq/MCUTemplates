C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     29/04/22  16:40:36  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE STC32G_DMA_Isr
OBJECT MODULE PLACED IN .\Objects\STC32G_DMA_Isr.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE Sources\Driver\isr\STC32G_DMA_Isr.c XSMALL FUNCTIONS(REENTRANT) OPTIMI
                    -ZE(4,SPEED) BROWSE INCDIR(.\Sources\User;.\Sources\User\include;.\Sources\FreeRTOS\include;.\Sources\FreeRTOS\portable\S
                    -TC32G12K128;.\Sources\Driver\inc;.\Sources\Task\inc) DEBUG PRINT(.\Listings\STC32G_DMA_Isr.lst) OBJECT(.\Objects\STC32G_
                    -DMA_Isr.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          #include "STC32G_DMA.h"
   14          #include "STC32G_SPI.h"
   15          #include "STC32G_LCM.h"
   16          
   17          bit DmaADCFlag;
   18          bit DmaM2MFlag;
   19          bit DmaTx1Flag;
   20          bit DmaRx1Flag;
   21          bit DmaTx2Flag;
   22          bit DmaRx2Flag;
   23          bit DmaTx3Flag;
   24          bit DmaRx3Flag;
   25          bit DmaTx4Flag;
   26          bit DmaRx4Flag;
   27          bit DmaI2CTFlag;
   28          bit DmaI2CRFlag;
   29          bit SpiTxFlag;
   30          bit SpiRxFlag;
   31          bit u2sFlag;    //UART to SPI
   32          bit s2uFlag;    //SPI to UART
   33          bit SpiSendFlag;
   34          bit UartSendFlag;
   35          bit DmaLcmFlag;
   36          bit LcmFlag;
   37          uint16_t LCM_Cnt;
   38          
   39          //========================================================================
   40          // 函数: DMA_ADC_ISR_Handler
   41          // 描述: DMA ADC 中断函数.
   42          // 参数: none.
   43          // 返回: none.
   44          // 版本: V1.0, 2022-03-23
   45          //========================================================================
   46          void DMA_ADC_ISR_Handler (void) interrupt DMA_ADC_VECTOR
   47          {
   48   1              // TODO: 在此处添加用户代码
   49   1              if(DMA_ADC_STA & 0x01)  //AD转换完成
   50   1              {
   51   2                      DMA_ADC_STA &= ~0x01;   //清标志位
   52   2                      DmaADCFlag = 1;
   53   2              }
   54   1      }
   55          
   56          //========================================================================
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     29/04/22  16:40:36  PAGE 2   

   57          // 函数: DMA_M2M_ISR_Handler
   58          // 描述: DMA M2M 中断函数.
   59          // 参数: none.
   60          // 返回: none.
   61          // 版本: V1.0, 2022-03-23
   62          //========================================================================
   63          void DMA_M2M_ISR_Handler (void) interrupt DMA_M2M_VECTOR
   64          {
   65   1              // TODO: 在此处添加用户代码
   66   1              if(DMA_M2M_STA & 0x01)  //M2M传输完成
   67   1              {
   68   2                      DMA_M2M_STA &= ~0x01;   //清标志位
   69   2                      DmaM2MFlag = 1;
   70   2                      if(u2sFlag)
   71   2                      {
   72   3                              u2sFlag = 0;
   73   3                              SpiSendFlag = 1;
   74   3                      }
   75   2                      if(s2uFlag)
   76   2                      {
   77   3                              s2uFlag = 0;
   78   3                              UartSendFlag = 1;
   79   3                      }
   80   2              }
   81   1      }
   82          
   83          //========================================================================
   84          // 函数: DMA_UART1TX_ISR_Handler
   85          // 描述: DMA UART1 TX 中断函数.
   86          // 参数: none.
   87          // 返回: none.
   88          // 版本: V1.0, 2022-03-23
   89          //========================================================================
   90          void DMA_UART1TX_ISR_Handler (void) interrupt DMA_UR1T_VECTOR
   91          {
   92   1              // TODO: 在此处添加用户代码
   93   1              if (DMA_UR1T_STA & 0x01)        //发送完成
   94   1              {
   95   2                      DMA_UR1T_STA &= ~0x01;  //清标志位
   96   2                      DmaTx1Flag = 1;
   97   2              }
   98   1              if (DMA_UR1T_STA & 0x04)        //数据覆盖
   99   1              {
  100   2                      DMA_UR1T_STA &= ~0x04;  //清标志位
  101   2              }
  102   1      }
  103          
  104          //========================================================================
  105          // 函数: DMA_UART1RX_ISR_Handler
  106          // 描述: DMA UART1 RX 中断函数.
  107          // 参数: none.
  108          // 返回: none.
  109          // 版本: V1.0, 2022-03-23
  110          //========================================================================
  111          void DMA_UART1RX_ISR_Handler (void) interrupt DMA_UR1R_VECTOR
  112          {
  113   1              // TODO: 在此处添加用户代码
  114   1              if (DMA_UR1R_STA & 0x01)        //接收完成
  115   1              {
  116   2                      DMA_UR1R_STA &= ~0x01;  //清标志位
  117   2                      DmaRx1Flag = 1;
  118   2      
  119   2      //              DMA_UR1T_TRIG();        //重新触发UART1发送功能
  120   2      //              DMA_UR1R_TRIG();        //重新触发UART1接收功能
  121   2              }
  122   1              if (DMA_UR1R_STA & 0x02)        //数据丢弃
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     29/04/22  16:40:36  PAGE 3   

  123   1              {
  124   2                      DMA_UR1R_STA &= ~0x02;  //清标志位
  125   2              }
  126   1      }
  127          
  128          //========================================================================
  129          // 函数: DMA_UART2TX_ISR_Handler
  130          // 描述: DMA UART2 TX 中断函数.
  131          // 参数: none.
  132          // 返回: none.
  133          // 版本: V1.0, 2022-03-23
  134          //========================================================================
  135          void DMA_UART2TX_ISR_Handler (void) interrupt DMA_UR2T_VECTOR
  136          {
  137   1              // TODO: 在此处添加用户代码
  138   1              if (DMA_UR2T_STA & 0x01)        //发送完成
  139   1              {
  140   2                      DMA_UR2T_STA &= ~0x01;  //清标志位
  141   2                      DmaTx2Flag = 1;
  142   2              }
  143   1              if (DMA_UR2T_STA & 0x04)        //数据覆盖
  144   1              {
  145   2                      DMA_UR2T_STA &= ~0x04;  //清标志位
  146   2              }
  147   1      }
  148          
  149          //========================================================================
  150          // 函数: DMA_UART2RX_ISR_Handler
  151          // 描述: DMA UART2 RX 中断函数.
  152          // 参数: none.
  153          // 返回: none.
  154          // 版本: V1.0, 2022-03-23
  155          //========================================================================
  156          void DMA_UART2RX_ISR_Handler (void) interrupt DMA_UR2R_VECTOR
  157          {
  158   1              // TODO: 在此处添加用户代码
  159   1              if (DMA_UR2R_STA & 0x01)        //接收完成
  160   1              {
  161   2                      DMA_UR2R_STA &= ~0x01;  //清标志位
  162   2                      DmaRx2Flag = 1;
  163   2      
  164   2      //              DMA_UR2T_TRIG();        //重新触发UART2发送功能
  165   2      //              DMA_UR2R_TRIG();        //重新触发UART2接收功能
  166   2              }
  167   1              if (DMA_UR2R_STA & 0x02)        //数据丢弃
  168   1              {
  169   2                      DMA_UR2R_STA &= ~0x02;  //清标志位
  170   2              }
  171   1      }
  172          
  173          //========================================================================
  174          // 函数: DMA_UART3TX_ISR_Handler
  175          // 描述: DMA UART3 TX 中断函数.
  176          // 参数: none.
  177          // 返回: none.
  178          // 版本: V1.0, 2022-03-23
  179          //========================================================================
  180          void DMA_UART3TX_ISR_Handler (void) interrupt DMA_UR3T_VECTOR
  181          {
  182   1              // TODO: 在此处添加用户代码
  183   1              if (DMA_UR3T_STA & 0x01)        //发送完成
  184   1              {
  185   2                      DMA_UR3T_STA &= ~0x01;  //清标志位
  186   2                      DmaTx3Flag = 1;
  187   2              }
  188   1              if (DMA_UR3T_STA & 0x04)        //数据覆盖
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     29/04/22  16:40:36  PAGE 4   

  189   1              {
  190   2                      DMA_UR3T_STA &= ~0x04;  //清标志位
  191   2              }
  192   1      }
  193          
  194          //========================================================================
  195          // 函数: DMA_UART3RX_ISR_Handler
  196          // 描述: DMA UART3 RX 中断函数.
  197          // 参数: none.
  198          // 返回: none.
  199          // 版本: V1.0, 2022-03-23
  200          //========================================================================
  201          void DMA_UART3RX_ISR_Handler (void) interrupt DMA_UR3R_VECTOR
  202          {
  203   1              // TODO: 在此处添加用户代码
  204   1              if (DMA_UR3R_STA & 0x01)        //接收完成
  205   1              {
  206   2                      DMA_UR3R_STA &= ~0x01;  //清标志位
  207   2                      DmaRx3Flag = 1;
  208   2      
  209   2      //              DMA_UR3T_TRIG();        //重新触发UART3发送功能
  210   2      //              DMA_UR3R_TRIG();        //重新触发UART3接收功能
  211   2              }
  212   1              if (DMA_UR3R_STA & 0x02)        //数据丢弃
  213   1              {
  214   2                      DMA_UR3R_STA &= ~0x02;  //清标志位
  215   2              }
  216   1      }
  217          
  218          //========================================================================
  219          // 函数: DMA_UART4TX_ISR_Handler
  220          // 描述: DMA UART4 TX 中断函数.
  221          // 参数: none.
  222          // 返回: none.
  223          // 版本: V1.0, 2022-03-23
  224          //========================================================================
  225          void DMA_UART4TX_ISR_Handler (void) interrupt DMA_UR4T_VECTOR
  226          {
  227   1              // TODO: 在此处添加用户代码
  228   1              if (DMA_UR4T_STA & 0x01)        //发送完成
  229   1              {
  230   2                      DMA_UR4T_STA &= ~0x01;  //清标志位
  231   2                      DmaTx4Flag = 1;
  232   2              }
  233   1              if (DMA_UR4T_STA & 0x04)        //数据覆盖
  234   1              {
  235   2                      DMA_UR4T_STA &= ~0x04;  //清标志位
  236   2              }
  237   1      }
  238          
  239          //========================================================================
  240          // 函数: DMA_UART4RX_ISR_Handler
  241          // 描述: DMA UART4 RX 中断函数.
  242          // 参数: none.
  243          // 返回: none.
  244          // 版本: V1.0, 2022-03-23
  245          //========================================================================
  246          void DMA_UART4RX_ISR_Handler (void) interrupt DMA_UR4R_VECTOR
  247          {
  248   1              // TODO: 在此处添加用户代码
  249   1              if (DMA_UR4R_STA & 0x01)        //接收完成
  250   1              {
  251   2                      DMA_UR4R_STA &= ~0x01;  //清标志位
  252   2                      DmaRx4Flag = 1;
  253   2      
  254   2      //              DMA_UR4T_TRIG();        //重新触发UART4发送功能
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     29/04/22  16:40:36  PAGE 5   

  255   2      //              DMA_UR4R_TRIG();        //重新触发UART4接收功能
  256   2              }
  257   1              if (DMA_UR4R_STA & 0x02)        //数据丢弃
  258   1              {
  259   2                      DMA_UR4R_STA &= ~0x02;  //清标志位
  260   2              }
  261   1      }
  262          
  263          //========================================================================
  264          // 函数: DMA_SPI_ISR_Handler
  265          // 描述: DMA SPI 中断函数.
  266          // 参数: none.
  267          // 返回: none.
  268          // 版本: V1.0, 2022-03-23
  269          //========================================================================
  270          void DMA_SPI_ISR_Handler (void) interrupt DMA_SPI_VECTOR
  271          {
  272   1              // TODO: 在此处添加用户代码
  273   1              if(DMA_SPI_STA & 0x01)  //通信完成
  274   1              {
  275   2                      DMA_SPI_STA &= ~0x01;   //清标志位
  276   2                      if(MSTR) 
  277   2                      { //主机模式
  278   3                              SpiTxFlag = 1;
  279   3                              SPI_SS_2 = 1;
  280   3                      }
  281   2                      else 
  282   2                      { //从机模式
  283   3                              SpiRxFlag = 1;
  284   3                      }
  285   2              }
  286   1              if(DMA_SPI_STA & 0x02)  //数据丢弃
  287   1              {
  288   2                      DMA_SPI_STA &= ~0x02;   //清标志位
  289   2              }
  290   1              if(DMA_SPI_STA & 0x04)  //数据覆盖
  291   1              {
  292   2                      DMA_SPI_STA &= ~0x04;   //清标志位
  293   2              }
  294   1      }
  295          
  296          //========================================================================
  297          // 函数: DMA_I2C_ISR_Handler
  298          // 描述: DMA I2C 发送中断函数.
  299          // 参数: none.
  300          // 返回: none.
  301          // 版本: V1.0, 2022-03-25
  302          //========================================================================
  303          void DMA_I2CT_ISR_Handler (void) interrupt DMA_I2CT_VECTOR
  304          {
  305   1              // TODO: 在此处添加用户代码
  306   1              if(DMA_I2CT_STA & 0x01)   //发送完成
  307   1              {
  308   2                      DMA_I2CT_STA &= ~0x01;  //清除标志位
  309   2                      DmaI2CTFlag = 0;
  310   2              }
  311   1              if(DMA_I2CT_STA & 0x04)   //数据覆盖
  312   1              {
  313   2                      DMA_I2CT_STA &= ~0x04;  //清除标志位
  314   2              }
  315   1      }
  316          
  317          //========================================================================
  318          // 函数: DMA_I2CR_ISR_Handler
  319          // 描述: DMA I2C 接收中断函数.
  320          // 参数: none.
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     29/04/22  16:40:36  PAGE 6   

  321          // 返回: none.
  322          // 版本: V1.0, 2022-03-25
  323          //========================================================================
  324          void DMA_I2CR_ISR_Handler (void) interrupt DMA_I2CR_VECTOR
  325          {
  326   1              // TODO: 在此处添加用户代码
  327   1              if(DMA_I2CR_STA & 0x01)   //接收完成
  328   1              {
  329   2                      DMA_I2CR_STA &= ~0x01;  //清除标志位
  330   2                      DmaI2CRFlag = 0;
  331   2              }
  332   1              if(DMA_I2CR_STA & 0x02)   //数据丢弃
  333   1              {
  334   2                      DMA_I2CR_STA &= ~0x02;  //清除标志位
  335   2              }
  336   1      }
  337          
  338          //========================================================================
  339          // 函数: DMA_LCM_ISR_Handler
  340          // 描述: DMA LCM 中断函数.
  341          // 参数: none.
  342          // 返回: none.
  343          // 版本: V1.0, 2022-03-23
  344          //========================================================================
  345          void DMA_LCM_ISR_Handler (void) interrupt DMA_LCM_VECTOR
  346          {
  347   1              // TODO: 在此处添加用户代码
  348   1              if(DMA_LCM_STA & 0x01)
  349   1              {
  350   2                      if(DmaLcmFlag)
  351   2                      {
  352   3                              DmaLcmFlag = 0;
  353   3                              DMA_LCM_CR = 0;
  354   3                      }
  355   2                      else
  356   2                      {
  357   3                              LCM_Cnt--;
  358   3                              if(LCM_Cnt == 0)
  359   3                              {
  360   4                                      DMA_LCM_CR = 0;
  361   4                                      LCD_CS=1;
  362   4                              }
  363   3                              else
  364   3                              {
  365   4                                      DMA_LCM_CR = 0xa0;      //Write dat
  366   4                              }
  367   3                      }
  368   2                      DMA_LCM_STA = 0;                //清标志位
  369   2              }
  370   1      }
  371          
  372          //========================================================================
  373          // 函数: DMA_ISR_Handler
  374          // 描述: DMA中断函数.
  375          // 参数: none.
  376          // 返回: none.
  377          // 版本: V1.0, 2021-05-25
  378          //========================================================================
  379          void DMA_ISR_Handler (void) interrupt 13
  380          {
  381   1              // TODO: 在此处添加用户代码
  382   1              
  383   1              //----------- DMA ADC --------------
  384   1              if(DMA_ADC_STA & 0x01)  //AD转换完成
  385   1              {
  386   2                      DMA_ADC_STA &= ~0x01;   //清标志位
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     29/04/22  16:40:36  PAGE 7   

  387   2                      DmaADCFlag = 1;
  388   2              }
  389   1      
  390   1              //----------- DMA M2M --------------
  391   1              if(DMA_M2M_STA & 0x01)  //M2M传输完成
  392   1              {
  393   2                      DMA_M2M_STA &= ~0x01;   //清标志位
  394   2                      DmaM2MFlag = 1;
  395   2                      if(u2sFlag)
  396   2                      {
  397   3                              u2sFlag = 0;
  398   3                              SpiSendFlag = 1;
  399   3                      }
  400   2                      if(s2uFlag)
  401   2                      {
  402   3                              s2uFlag = 0;
  403   3                              UartSendFlag = 1;
  404   3                      }
  405   2              }
  406   1      
  407   1              //---------- DMA UART1 -------------
  408   1              if (DMA_UR1T_STA & 0x01)        //发送完成
  409   1              {
  410   2                      DMA_UR1T_STA &= ~0x01;  //清标志位
  411   2                      DmaTx1Flag = 1;
  412   2              }
  413   1              if (DMA_UR1T_STA & 0x04)        //数据覆盖
  414   1              {
  415   2                      DMA_UR1T_STA &= ~0x04;  //清标志位
  416   2              }
  417   1              
  418   1              if (DMA_UR1R_STA & 0x01)        //接收完成
  419   1              {
  420   2                      DMA_UR1R_STA &= ~0x01;  //清标志位
  421   2                      DmaRx1Flag = 1;
  422   2              }
  423   1              if (DMA_UR1R_STA & 0x02)        //数据丢弃
  424   1              {
  425   2                      DMA_UR1R_STA &= ~0x02;  //清标志位
  426   2              }
  427   1              //---------- DMA UART2 -------------
  428   1              if (DMA_UR2T_STA & 0x01)        //发送完成
  429   1              {
  430   2                      DMA_UR2T_STA &= ~0x01;  //清标志位
  431   2                      DmaTx2Flag = 1;
  432   2              }
  433   1              if (DMA_UR2T_STA & 0x04)        //数据覆盖
  434   1              {
  435   2                      DMA_UR2T_STA &= ~0x04;  //清标志位
  436   2              }
  437   1              
  438   1              if (DMA_UR2R_STA & 0x01)        //接收完成
  439   1              {
  440   2                      DMA_UR2R_STA &= ~0x01;  //清标志位
  441   2                      DmaRx2Flag = 1;
  442   2              }
  443   1              if (DMA_UR2R_STA & 0x02)        //数据丢弃
  444   1              {
  445   2                      DMA_UR2R_STA &= ~0x02;  //清标志位
  446   2              }
  447   1              //---------- DMA UART3 -------------
  448   1              if (DMA_UR3T_STA & 0x01)        //发送完成
  449   1              {
  450   2                      DMA_UR3T_STA &= ~0x01;  //清标志位
  451   2                      DmaTx3Flag = 1;
  452   2              }
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     29/04/22  16:40:36  PAGE 8   

  453   1              if (DMA_UR3T_STA & 0x04)        //数据覆盖
  454   1              {
  455   2                      DMA_UR3T_STA &= ~0x04;  //清标志位
  456   2              }
  457   1              
  458   1              if (DMA_UR3R_STA & 0x01)        //接收完成
  459   1              {
  460   2                      DMA_UR3R_STA &= ~0x01;  //清标志位
  461   2                      DmaRx3Flag = 1;
  462   2              }
  463   1              if (DMA_UR3R_STA & 0x02)        //数据丢弃
  464   1              {
  465   2                      DMA_UR3R_STA &= ~0x02;  //清标志位
  466   2              }
  467   1              //---------- DMA UART4 -------------
  468   1              if (DMA_UR4T_STA & 0x01)        //发送完成
  469   1              {
  470   2                      DMA_UR4T_STA &= ~0x01;  //清标志位
  471   2                      DmaTx4Flag = 1;
  472   2              }
  473   1              if (DMA_UR4T_STA & 0x04)        //数据覆盖
  474   1              {
  475   2                      DMA_UR4T_STA &= ~0x04;  //清标志位
  476   2              }
  477   1              
  478   1              if (DMA_UR4R_STA & 0x01)        //接收完成
  479   1              {
  480   2                      DMA_UR4R_STA &= ~0x01;  //清标志位
  481   2                      DmaRx4Flag = 1;
  482   2              }
  483   1              if (DMA_UR4R_STA & 0x02)        //数据丢弃
  484   1              {
  485   2                      DMA_UR4R_STA &= ~0x02;  //清标志位
  486   2              }
  487   1      
  488   1              //---------- DMA SPI -------------
  489   1              if(DMA_SPI_STA & 0x01)  //通信完成
  490   1              {
  491   2                      DMA_SPI_STA &= ~0x01;   //清标志位
  492   2                      if(MSTR) 
  493   2                      { //主机模式
  494   3                              SpiTxFlag = 1;
  495   3                              SPI_SS_2 = 1;
  496   3                      }
  497   2                      else 
  498   2                      { //从机模式
  499   3                              SpiRxFlag = 1;
  500   3                      }
  501   2              }
  502   1              if(DMA_SPI_STA & 0x02)  //数据丢弃
  503   1              {
  504   2                      DMA_SPI_STA &= ~0x02;   //清标志位
  505   2              }
  506   1              if(DMA_SPI_STA & 0x04)  //数据覆盖
  507   1              {
  508   2                      DMA_SPI_STA &= ~0x04;   //清标志位
  509   2              }
  510   1      
  511   1              //------------- LCM --------------
  512   1              if(LCMIFSTA & 0x01)
  513   1              {
  514   2                      LCMIFSTA = 0x00;
  515   2                      LcmFlag = 0;
  516   2              }
  517   1              
  518   1              //---------- DMA LCM -------------
C251 COMPILER V5.60.0,  STC32G_DMA_Isr                                                     29/04/22  16:40:36  PAGE 9   

  519   1              if(DMA_LCM_STA & 0x01)
  520   1              {
  521   2                      if(DmaLcmFlag)
  522   2                      {
  523   3                              DmaLcmFlag = 0;
  524   3                              DMA_LCM_CR = 0;
  525   3                      }
  526   2                      else
  527   2                      {
  528   3                              LCM_Cnt--;
  529   3                              if(LCM_Cnt == 0)
  530   3                              {
  531   4                                      DMA_LCM_CR = 0;
  532   4                                      LCD_CS=1;
  533   4                              }
  534   3                              else
  535   3                              {
  536   4                                      DMA_LCM_CR = 0xa0;      //Write dat
  537   4                              }
  538   3                      }
  539   2                      DMA_LCM_STA = 0;                //清标志位
  540   2              }
  541   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1300     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =         2     ------
  bit size             =        20     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
