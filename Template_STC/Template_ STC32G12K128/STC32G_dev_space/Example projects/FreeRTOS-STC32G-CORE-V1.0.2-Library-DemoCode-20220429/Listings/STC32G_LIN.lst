C251 COMPILER V5.60.0,  STC32G_LIN                                                         29/04/22  16:40:32  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE STC32G_LIN
OBJECT MODULE PLACED IN .\Objects\STC32G_LIN.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE Sources\Driver\src\STC32G_LIN.c XSMALL FUNCTIONS(REENTRANT) OPTIMIZE(4
                    -,SPEED) BROWSE INCDIR(.\Sources\User;.\Sources\User\include;.\Sources\FreeRTOS\include;.\Sources\FreeRTOS\portable\STC32
                    -G12K128;.\Sources\Driver\inc;.\Sources\Task\inc) DEBUG PRINT(.\Listings\STC32G_LIN.lst) OBJECT(.\Objects\STC32G_LIN.obj)
                    - 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          #include "STC32G_LIN.h"
   14          
   15          //========================================================================
   16          // 函数: uint8_t ReadReg(uint8_t addr)
   17          // 描述: Lin功能寄存器读取函数。
   18          // 参数: Lin功能寄存器地址.
   19          // 返回: Lin功能寄存器数据.
   20          // 版本: VER1.0
   21          // 日期: 2021-01-05
   22          // 备注: 
   23          //========================================================================
   24          uint8_t LinReadReg(uint8_t addr)
   25          {
   26   1              uint8_t dat;
   27   1              LINAR = addr;
   28   1              dat = LINDR;
   29   1              return dat;
   30   1      }
   31          
   32          //========================================================================
   33          // 函数: void WriteReg(uint8_t addr, uint8_t dat)
   34          // 描述: Lin功能寄存器配置函数。
   35          // 参数: Lin功能寄存器地址, Lin功能寄存器数据.
   36          // 返回: none.
   37          // 版本: VER1.0
   38          // 日期: 2021-01-05
   39          // 备注: 
   40          //========================================================================
   41          void LinWriteReg(uint8_t addr, uint8_t dat)
   42          {
   43   1              LINAR = addr;
   44   1              LINDR = dat;
   45   1      }
   46          
   47          //========================================================================
   48          // 函数: void LinReadMsg(uint8_t *pdat)
   49          // 描述: Lin读取数据函数。
   50          // 参数: *pdat: 接收数据缓冲区.
   51          // 返回: none.
   52          // 版本: VER1.0
   53          // 日期: 2021-01-05
   54          // 备注: 
   55          //========================================================================
   56          void LinReadMsg(uint8_t *pdat)
C251 COMPILER V5.60.0,  STC32G_LIN                                                         29/04/22  16:40:32  PAGE 2   

   57          {
   58   1              uint8_t i;
   59   1      
   60   1              LinWriteReg(LSEL,0x80); //地址自增，从0开始
   61   1              for(i=0;i<FRAME_LEN;i++)
   62   1              {
   63   2                      pdat[i] = LinReadReg(LBUF);
   64   2              }
   65   1      }
   66          
   67          //========================================================================
   68          // 函数: void LinSendMsg(uint8_t *pdat)
   69          // 描述: Lin设置数据函数。
   70          // 参数: *pdat: 设置数据缓冲区.
   71          // 返回: Lin ID.
   72          // 版本: VER1.0
   73          // 日期: 2021-01-05
   74          // 备注: 
   75          //========================================================================
   76          void LinSendMsg(uint8_t *pdat)
   77          {
   78   1              uint8_t i;
   79   1      
   80   1              LinWriteReg(LSEL,0x80);         //地址自增，从0开始
   81   1              for(i=0;i<FRAME_LEN;i++)
   82   1              {
   83   2                      LinWriteReg(LBUF,pdat[i]);
   84   2              }
   85   1      }
   86          
   87          //========================================================================
   88          // 函数: void LinSetID(uint8_t lid)
   89          // 描述: 设置LIN ID函数。
   90          // 参数: none.
   91          // 返回: none.
   92          // 版本: VER1.0
   93          // 日期: 2021-01-05
   94          // 备注: 
   95          //========================================================================
   96          void LinSetID(uint8_t lid)
   97          {
   98   1              LinWriteReg(LID,lid);                   //设置总线ID
   99   1      }
  100          
  101          //========================================================================
  102          // 函数: uint8_t GetLinError(void)
  103          // 描述: 获取LIN总线错误寄存器状态。
  104          // 参数: none.
  105          // 返回: 错误寄存器状态.
  106          // 版本: VER1.0
  107          // 日期: 2021-01-05
  108          // 备注: 
  109          //========================================================================
  110          uint8_t GetLinError(void)
  111          {
  112   1              uint8_t sta;
  113   1              sta = LinReadReg(LER);          //读取清除错误寄存器
  114   1              return sta;
  115   1      }
  116          
  117          //========================================================================
  118          // 函数: uint8_t WaitLinReady(void)
  119          // 描述: 等待LIN总线就绪。
  120          // 参数: none.
  121          // 返回: LIN总线状态.
  122          // 版本: VER1.0
C251 COMPILER V5.60.0,  STC32G_LIN                                                         29/04/22  16:40:32  PAGE 3   

  123          // 日期: 2021-01-05
  124          // 备注: 
  125          //========================================================================
  126          uint8_t WaitLinReady(void)
  127          {
  128   1              uint8_t lsr;
  129   1              do{
  130   2                      lsr = LinReadReg(LSR);
  131   2              }while(!(lsr & 0x02));          //判断ready状态
  132   1              return lsr;
  133   1      }
  134          
  135          //========================================================================
  136          // 函数: void SendAbortCmd(void)
  137          // 描述: 主模式发送Lin总线Abort函数。
  138          // 参数: none.
  139          // 返回: none.
  140          // 版本: VER1.0
  141          // 日期: 2021-01-05
  142          // 备注: 
  143          //========================================================================
  144          void SendAbortCmd(void)
  145          {
  146   1              LinWriteReg(LCR,0x80);          //主模式 Send Abort
  147   1      }
  148          
  149          //========================================================================
  150          // 函数: void SendHeadCmd(void)
  151          // 描述: 主模式发送Lin总线Header函数。
  152          // 参数: none.
  153          // 返回: none.
  154          // 版本: VER1.0
  155          // 日期: 2021-01-05
  156          // 备注: 
  157          //========================================================================
  158          void SendHeadCmd(void)
  159          {
  160   1              LinWriteReg(LCR,0x81);          //主模式 Send Header
  161   1      }
  162          
  163          //========================================================================
  164          // 函数: void SendDatCmd(void)
  165          // 描述: 主模式发送Lin总线数据函数。
  166          // 参数: none.
  167          // 返回: none.
  168          // 版本: VER1.0
  169          // 日期: 2021-01-05
  170          // 备注: 
  171          //========================================================================
  172          void SendDatCmd(void)
  173          {
  174   1              uint8_t lcr_val;
  175   1              lcr_val = 0x82+(LIN_MODE<<6)+(FRAME_LEN<<2);
  176   1              LinWriteReg(LCR,lcr_val);
  177   1      }
  178          
  179          //========================================================================
  180          // 函数: void ResponseTxCmd(void)
  181          // 描述: 从模式发送Lin总线Tx Response函数。
  182          // 参数: none.
  183          // 返回: none.
  184          // 版本: VER1.0
  185          // 日期: 2021-01-05
  186          // 备注: 
  187          //========================================================================
  188          void ResponseTxCmd(void)
C251 COMPILER V5.60.0,  STC32G_LIN                                                         29/04/22  16:40:32  PAGE 4   

  189          {
  190   1              uint8_t lcr_val;
  191   1              lcr_val = 0x02+(LIN_MODE<<6)+(FRAME_LEN<<2);
  192   1              LinWriteReg(LCR,lcr_val);
  193   1      }
  194          
  195          //========================================================================
  196          // 函数: void ResponseRxCmd(void)
  197          // 描述: 从模式发送Lin总线Rx Response函数。
  198          // 参数: none.
  199          // 返回: none.
  200          // 版本: VER1.0
  201          // 日期: 2021-01-05
  202          // 备注: 
  203          //========================================================================
  204          void ResponseRxCmd(void)
  205          {
  206   1              uint8_t lcr_val;
  207   1              lcr_val = 0x03+(LIN_MODE<<6)+(FRAME_LEN<<2);
  208   1              LinWriteReg(LCR,lcr_val);
  209   1      }
  210          
  211          //========================================================================
  212          // 函数: void LinTxResponse(uint8_t *pdat)
  213          // 描述: Lin从机发送应答数据，跟主机发送的Header拼成一个完整的帧。
  214          // 参数: *pdat: 发送数据缓冲区.
  215          // 返回: none.
  216          // 版本: VER1.0
  217          // 日期: 2021-01-05
  218          // 备注: 
  219          //========================================================================
  220          void LinTxResponse(uint8_t *pdat)
  221          {
  222   1              LinSendMsg(pdat);
  223   1              ResponseTxCmd();                                        //TX response
  224   1              WaitLinReady();                                         //等待ready状态
  225   1              GetLinError();                                          //读取清除错误寄存器
  226   1      }
  227          
  228          //========================================================================
  229          // 函数: void LinReadFrame(uint8_t *pdat)
  230          // 描述: Lin主机发送完整帧函数。
  231          // 参数: lid: Lin ID; *pdat: 发送数据缓冲区.
  232          // 返回: none.
  233          // 版本: VER1.0
  234          // 日期: 2021-01-05
  235          // 备注: 
  236          //========================================================================
  237          void LinReadFrame(uint8_t *pdat)
  238          {
  239   1              ResponseRxCmd();                                        //RX response
  240   1              WaitLinReady();                                         //等待ready状态
  241   1              GetLinError();                                          //读取清除错误寄存器
  242   1      
  243   1              LinReadMsg(pdat);                                       //接收Lin总线数据
  244   1      }
  245          
  246          //========================================================================
  247          // 函数: void LinSendFrame(uint8_t lid, uint8_t *pdat)
  248          // 描述: Lin主机发送完整帧函数。
  249          // 参数: lid: Lin ID; *pdat: 发送数据缓冲区.
  250          // 返回: none.
  251          // 版本: VER1.0
  252          // 日期: 2021-01-05
  253          // 备注: 
  254          //========================================================================
C251 COMPILER V5.60.0,  STC32G_LIN                                                         29/04/22  16:40:32  PAGE 5   

  255          void LinSendFrame(uint8_t lid, uint8_t *pdat)
  256          {
  257   1              LinSetID(lid);                                          //设置总线ID
  258   1              LinSendMsg(pdat);
  259   1      
  260   1              SendHeadCmd();                                          //主模式 Send Seader
  261   1              WaitLinReady();                                         //等待ready状态
  262   1              GetLinError();                                          //读取清除错误寄存器
  263   1      
  264   1              SendDatCmd();                                                   //Send Data
  265   1              WaitLinReady();                                         //等待ready状态
  266   1              GetLinError();                                          //读取清除错误寄存器
  267   1      }
  268          
  269          //========================================================================
  270          // 函数: void LinSendHeaderRead(uint8_t lid, uint8_t *pdat)
  271          // 描述: Lin主机发送Header，由从机发送应答数据，拼成一个完整的帧。
  272          // 参数: lid: 发送应答从机的总线ID; *pdat: 接收数据缓冲区.
  273          // 返回: none.
  274          // 版本: VER1.0
  275          // 日期: 2021-01-05
  276          // 备注: 
  277          //========================================================================
  278          void LinSendHeaderRead(uint8_t lid, uint8_t *pdat)
  279          {
  280   1              LinSetID(lid);                                          //设置发送Response从机总线ID
  281   1      
  282   1              SendHeadCmd();                                          //主模式 send header
  283   1              WaitLinReady();                                         //等待ready状态
  284   1              GetLinError();                                          //读取清除错误寄存器
  285   1              
  286   1              ResponseRxCmd();                                        //RX response
  287   1              WaitLinReady();                                         //等待ready状态
  288   1              GetLinError();                                          //读取清除错误寄存器
  289   1      
  290   1              LinReadMsg(pdat);                               //接收Lin总线从机发送的应答数据
  291   1      }
  292          
  293          //========================================================================
  294          // 函数: void LinSetBaudrate(uint16_t brt)
  295          // 描述: Lin总线波特率设置函数。
  296          // 参数: brt: 波特率.
  297          // 返回: none.
  298          // 版本: VER1.0
  299          // 日期: 2021-01-05
  300          // 备注: 
  301          //========================================================================
  302          void LinSetBaudrate(uint16_t brt)
  303          {
  304   1              uint16_t tmp;
  305   1              tmp = (MAIN_Fosc >> 4) / brt;
  306   1              LinWriteReg(DLH,(uint8_t)(tmp>>8));
  307   1              LinWriteReg(DLL,(uint8_t)tmp);
  308   1      }
  309          
  310          //========================================================================
  311          // 函数: void LinSetHeadDelay(uint8_t base_ms, uint8_t prescaler)
  312          // 描述: Lin总线设置帧头延时函数。
  313          // 参数: base_ms:延时计数, prescaler:延时分频.
  314          // 返回: none.
  315          // 版本: VER1.0
  316          // 日期: 2021-01-05
  317          // 备注: 
  318          //========================================================================
  319          void LinSetHeadDelay(uint8_t base_ms, uint8_t prescaler)
  320          {
C251 COMPILER V5.60.0,  STC32G_LIN                                                         29/04/22  16:40:32  PAGE 6   

  321   1              uint16_t tmp;
  322   1              tmp = (MAIN_Fosc * base_ms) / 1000;
  323   1              LinWriteReg(HDRH,(uint8_t)(tmp>>8));
  324   1              LinWriteReg(HDRL,(uint8_t)tmp);         //设置帧头延时计数
  325   1      
  326   1              LinWriteReg(HDP,prescaler);             //设置帧头延时分频
  327   1      }
  328          
  329          //========================================================================
  330          // 函数: void LIN_Inilize(LIN_InitTypeDef *LIN)
  331          // 描述: LIN 初始化程序.
  332          // 参数: LIN: 结构参数,请参考LIN.h里的定义.
  333          // 返回: none.
  334          // 版本: V1.0, 2021-06-02
  335          //========================================================================
  336          void LIN_Inilize(LIN_InitTypeDef *LIN)
  337          {
  338   1              if(LIN->LIN_Enable == ENABLE)   LINEN = 1;              //使能LIN模块
  339   1              else                                                            LINEN = 0;              //关闭LIN模块
  340   1      
  341   1              GetLinError();                                          //读取清除错误寄存器
  342   1              LinWriteReg(LIE,LIN->LIN_IE);           //LIE中断使能寄存器
  343   1              LinSetBaudrate(LIN->LIN_Baudrate);      //设置波特率
  344   1              LinSetHeadDelay(LIN->LIN_HeadDelay,LIN->LIN_HeadPrescaler);     //设置帧头延时
  345   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       455     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
