C251 COMPILER V5.60.0,  STC32G_Clock                                                       29/04/22  16:40:29  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE STC32G_Clock
OBJECT MODULE PLACED IN .\Objects\STC32G_Clock.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE Sources\Driver\src\STC32G_Clock.c XSMALL FUNCTIONS(REENTRANT) OPTIMIZE
                    -(4,SPEED) BROWSE INCDIR(.\Sources\User;.\Sources\User\include;.\Sources\FreeRTOS\include;.\Sources\FreeRTOS\portable\STC
                    -32G12K128;.\Sources\Driver\inc;.\Sources\Task\inc) DEBUG PRINT(.\Listings\STC32G_Clock.lst) OBJECT(.\Objects\STC32G_Cloc
                    -k.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          #include        "STC32G_Clock.h"
   14          #include        "STC32G_Delay.h"
   15          
   16          //========================================================================
   17          // 函数: void HIRCClkConfig(uint8_t div)
   18          // 描述: 高速IRC时钟初始化程序.
   19          // 参数: div: 时钟分频系数.
   20          // 返回: none.
   21          // 版本: V1.0, 2022-04-03
   22          //========================================================================
   23          void HIRCClkConfig(uint8_t div)
   24          {
   25   1              HIRCCR = 0x80; //启动内部 IRC
   26   1              while (!(HIRCCR & 1)); //等待时钟稳定
   27   1              CLKDIV = div;
   28   1              CLKSEL = 0x00; //选择内部 IRC ( 默认 )
   29   1      }
   30          
   31          //========================================================================
   32          // 函数: void XOSCClkConfig(uint8_t div)
   33          // 描述: 外部晶振时钟初始化程序.
   34          // 参数: div: 时钟分频系数.
   35          // 返回: none.
   36          // 版本: V1.0, 2022-04-03
   37          //========================================================================
   38          void XOSCClkConfig(uint8_t div)
   39          {
   40   1              XOSCCR = 0xc0; //启动外部晶振
   41   1              while (!(XOSCCR & 1)); //等待时钟稳定
   42   1              CLKDIV = div;  //时钟分频
   43   1              CLKSEL = 0x01; //选择外部晶振
   44   1      }
   45          
   46          //========================================================================
   47          // 函数: void IRC32KClkConfig(uint8_t div)
   48          // 描述: 低速32K IRC时钟初始化程序.
   49          // 参数: div: 时钟分频系数.
   50          // 返回: none.
   51          // 版本: V1.0, 2022-04-03
   52          //========================================================================
   53          void IRC32KClkConfig(uint8_t div)
   54          {
   55   1              IRC32KCR = 0x80; //启动内部 32K IRC
   56   1              while (!(IRC32KCR & 1)); //等待时钟稳定
C251 COMPILER V5.60.0,  STC32G_Clock                                                       29/04/22  16:40:29  PAGE 2   

   57   1              CLKDIV = div;  //时钟分频
   58   1              CLKSEL = 0x03; //选择内部 32K
   59   1      }
   60          
   61          //========================================================================
   62          // 函数: void HSPllClkConfig(uint8_t clksrc, uint8_t pcki, uint8_t pllsel, uint8_t div)
   63          // 描述: 高速IO时钟初始化程序.
   64          // 参数: clksrc: 系统时钟选择, MCLKSEL_HIRC/MCLKSEL_XIRC/MCLKSEL_X32K/MCLKSEL_I32K/MCLKSEL_PLL/MCLKSEL_PL
             -L2/MCLKSEL_I48M.
   65          // 参数: pllsel: PLL时钟选择, PLL_96M/PLL_144M.
   66          // 参数: div: 高速IO时钟分频系数.
   67          // 返回: none.
   68          // 版本: V1.0, 2022-04-03
   69          //========================================================================
   70          void HSPllClkConfig(uint8_t clksrc, uint8_t pllsel, uint8_t div)
   71          {
   72   1              MainClockSel(clksrc);                   //系统时钟选择, MCLKSEL_HIRC/MCLKSEL_XIRC/MCLKSEL_X32K/MCLKSEL_I32K/MCLKSEL_PLL/
             -MCLKSEL_PLL2/MCLKSEL_I48M
   73   1      
   74   1              //系统时钟 n 分频作为PLL时钟源,确保分频后为12M
   75   1          USBCLK &= ~PCKI_MSK;
   76   1      #if (MAIN_Fosc == 12000000UL)
                   USBCLK |= PCKI_D1;          //PLL输入时钟1分频
               #elif (MAIN_Fosc == 24000000UL)
   79   1          USBCLK |= PCKI_D2;          //PLL输入时钟2分频
   80   1      #elif (MAIN_Fosc == 48000000UL)
                   USBCLK |= PCKI_D4;          //PLL输入时钟4分频
               #elif (MAIN_Fosc == 96000000UL)
                   USBCLK |= PCKI_D8;          //PLL输入时钟8分频
               #else
                   USBCLK |= PCKI_D1;          //默认PLL输入时钟1分频
               #endif
   87   1      
   88   1              PLLClockSel(pllsel);                    //PLL时钟选择, PLL_96M/PLL_144M
   89   1              PLLEnable(ENABLE);                              //PLL倍频使能, ENABLE/DISABLE
   90   1              delay_ms(1);              //等待PLL锁频
   91   1              HSIOClockSel(HSCK_PLL);         //高速IO时钟选择, HSCK_MCLK/HSCK_PLL
   92   1              HSClockDiv(div);                                        //高速IO时钟分频系数
   93   1      }
   94          
   95          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       258     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
