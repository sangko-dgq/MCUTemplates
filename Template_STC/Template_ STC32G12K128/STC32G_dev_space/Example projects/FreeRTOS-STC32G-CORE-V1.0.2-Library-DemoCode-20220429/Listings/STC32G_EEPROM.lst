C251 COMPILER V5.60.0,  STC32G_EEPROM                                                      29/04/22  16:40:30  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE STC32G_EEPROM
OBJECT MODULE PLACED IN .\Objects\STC32G_EEPROM.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE Sources\Driver\src\STC32G_EEPROM.c XSMALL FUNCTIONS(REENTRANT) OPTIMIZ
                    -E(4,SPEED) BROWSE INCDIR(.\Sources\User;.\Sources\User\include;.\Sources\FreeRTOS\include;.\Sources\FreeRTOS\portable\ST
                    -C32G12K128;.\Sources\Driver\inc;.\Sources\Task\inc) DEBUG PRINT(.\Listings\STC32G_EEPROM.lst) OBJECT(.\Objects\STC32G_EE
                    -PROM.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          #include "STC32G_EEPROM.h"
   14          
   15          //========================================================================
   16          // 函数: void ISP_Disable(void)
   17          // 描述: 禁止访问ISP/IAP.
   18          // 参数: non.
   19          // 返回: non.
   20          // 版本: V1.0, 2012-10-22
   21          //========================================================================
   22          void DisableEEPROM(void)
   23          {
   24   1              IAP_CONTR = 0;                  //禁止IAP操作
   25   1              IAP_CMD   = 0;                  //去除IAP命令
   26   1              IAP_TRIG  = 0;                  //防止IAP命令误触发
   27   1              IAP_ADDRE = 0xff;   //将地址设置到非 IAP 区域
   28   1              IAP_ADDRH = 0xff;   //将地址设置到非 IAP 区域
   29   1              IAP_ADDRL = 0xff;
   30   1      }
   31          
   32          //========================================================================
   33          // 函数: void EEPROM_Trig(void)
   34          // 描述: 触发EEPROM操作.
   35          // 参数: none.
   36          // 返回: none.
   37          // 版本: V1.0, 2014-6-30
   38          //========================================================================
   39          void EEPROM_Trig(void)
   40          {
   41   1              F0 = EA;    //保存全局中断
   42   1              EA = 0;     //禁止中断, 避免触发命令无效
   43   1              IAP_TRIG = 0x5A;
   44   1              IAP_TRIG = 0xA5;                    //先送5AH，再送A5H到IAP触发寄存器，每次都需要如此
   45   1                                                                                                                                                              //送完A5H后，IAP命令立即被触发启动
   46   1                                                                                                                                                              //CPU等待IAP完成后，才会继续执行程序。
   47   1              _nop_();   //由于STC32G是多级流水线的指令系统，触发命令后建议加4个NOP，保证IAP_DATA的数据完成准备
   48   1              _nop_();
   49   1              _nop_();
   50   1              _nop_();
   51   1              EA = F0;    //恢复全局中断
   52   1      }
   53          
   54          //========================================================================
   55          // 函数: void EEPROM_read_n(uint32_t EE_address,uint8_t *DataAddress,uint16_t number)
   56          // 描述: 从指定EEPROM首地址读出n个字节放指定的缓冲.
C251 COMPILER V5.60.0,  STC32G_EEPROM                                                      29/04/22  16:40:30  PAGE 2   

   57          // 参数: EE_address:  读出EEPROM的首地址.
   58          //       DataAddress: 读出数据放缓冲的首地址.
   59          //       number:      读出的字节长度.
   60          // 返回: non.
   61          // 版本: V1.0, 2012-10-22
   62          //========================================================================
   63          void EEPROM_read_n(uint32_t EE_address,uint8_t *DataAddress,uint16_t number)
   64          {
   65   1              IAP_ENABLE();                           //设置等待时间，允许IAP操作，送一次就够
   66   1              IAP_READ();                             //送字节读命令，命令不需改变时，不需重新送命令
   67   1              do
   68   1              {
   69   2                      IAP_ADDRE = (uint8_t)(EE_address >> 16); //送地址高字节（地址需要改变时才需重新送地址）
   70   2                      IAP_ADDRH = (uint8_t)(EE_address >> 8);  //送地址中字节（地址需要改变时才需重新送地址）
   71   2                      IAP_ADDRL = (uint8_t)EE_address;         //送地址低字节（地址需要改变时才需重新送地址）
   72   2                      EEPROM_Trig();                      //触发EEPROM操作
   73   2                      *DataAddress = IAP_DATA;            //读出的数据送往
   74   2                      EE_address++;
   75   2                      DataAddress++;
   76   2              }while(--number);
   77   1      
   78   1              DisableEEPROM();
   79   1      }
   80          
   81          //========================================================================
   82          // 函数: void EEPROM_SectorErase(uint32_t EE_address)
   83          // 描述: 把指定地址的EEPROM扇区擦除.
   84          // 参数: EE_address:  要擦除的扇区EEPROM的地址.
   85          // 返回: non.
   86          // 版本: V1.0, 2013-5-10
   87          //========================================================================
   88          void EEPROM_SectorErase(uint32_t EE_address)
   89          {
   90   1              IAP_ENABLE();                       //设置等待时间，允许IAP操作，送一次就够
   91   1              IAP_ERASE();                        //宏调用, 送扇区擦除命令，命令不需改变时，不需重新送命令
   92   1                                                                                                                                                              //只有扇区擦除，没有字节擦除，512字节/扇区。
   93   1                                                                                                                                                              //扇区中任意一个字节地址都是扇区地址。
   94   1              IAP_ADDRE = (uint8_t)(EE_address >> 16); //送扇区地址高字节（地址需要改变时才需重新送地址）
   95   1              IAP_ADDRH = (uint8_t)(EE_address >> 8);  //送扇区地址中字节（地址需要改变时才需重新送地址）
   96   1              IAP_ADDRL = (uint8_t)EE_address;         //送扇区地址低字节（地址需要改变时才需重新送地址）
   97   1              EEPROM_Trig();                      //触发EEPROM操作
   98   1              DisableEEPROM();                    //禁止EEPROM操作
   99   1      }
  100          
  101          //========================================================================
  102          // 函数: void EEPROM_write_n(uint32_t EE_address,uint8_t *DataAddress,uint16_t number)
  103          // 描述: 把缓冲的n个字节写入指定首地址的EEPROM.
  104          // 参数: EE_address:  写入EEPROM的首地址.
  105          //       DataAddress: 写入源数据的缓冲的首地址.
  106          //       number:      写入的字节长度.
  107          // 返回: non.
  108          // 版本: V1.0, 2012-10-22
  109          //========================================================================
  110          void EEPROM_write_n(uint32_t EE_address,uint8_t *DataAddress,uint16_t number)
  111          {
  112   1              IAP_ENABLE();                       //设置等待时间，允许IAP操作，送一次就够
  113   1              IAP_WRITE();                        //宏调用, 送字节写命令
  114   1              do
  115   1              {
  116   2                      IAP_ADDRE = (uint8_t)(EE_address >> 16); //送地址高字节（地址需要改变时才需重新送地址）
  117   2                      IAP_ADDRH = (uint8_t)(EE_address >> 8);  //送地址中字节（地址需要改变时才需重新送地址）
  118   2                      IAP_ADDRL = (uint8_t)EE_address;         //送地址低字节（地址需要改变时才需重新送地址）
  119   2                      IAP_DATA  = *DataAddress;         //送数据到IAP_DATA，只有数据改变时才需重新送
  120   2                      EEPROM_Trig();                    //触发EEPROM操作
  121   2                      EE_address++;                     //下一个地址
  122   2                      DataAddress++;                    //下一个数据
C251 COMPILER V5.60.0,  STC32G_EEPROM                                                      29/04/22  16:40:30  PAGE 3   

  123   2              }while(--number);                   //直到结束
  124   1              DisableEEPROM();
  125   1      }
  126          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       236     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
