C251 COMPILER V5.60.0,  EEPROM                                                             23/08/22  22:51:19  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Objects\EEPROM.obj
COMPILER INVOKED BY: D:\Application\keilC251_v560\C251\BIN\C251.EXE User\System\EEPROM.C XSMALL ROM(HUGE) OPTIMIZE(8,SPE
                    -ED) BROWSE INCDIR(.\User;.\User\oled_gui;.\User\oled_gui\oled_core;.\User\oled_gui\oled_widget;.\User\PageManage;.\User\
                    -Sensor;.\User\System;.\User\Bluetooth) DEBUG PRINT(.\Listings\EEPROM.lst) TABS(2) OBJECT(.\Objects\EEPROM.obj) 

stmt  level    source

    1          #include "STC32G.h"
    2          #include "EEPROM.h"
    3          #include "intrins.h"
    4          
    5          //========================================================================
    6          // 函数: void DisableEEPROM(void)
    7          // 描述: 禁止访问ISP/IAP.
    8          // 参数: non.
    9          // 返回: non.
   10          // 版本: V1.0, 2012-10-22
   11          //========================================================================
   12          void  DisableEEPROM(void)
   13          {
   14   1        IAP_CONTR = 0;      //禁止ISP/IAP操作
   15   1        IAP_CMD   = 0;      //去除ISP/IAP命令
   16   1        IAP_TRIG  = 0;      //防止ISP/IAP命令误触发
   17   1        IAP_ADDRE = 0x00;
   18   1        IAP_ADDRH = 0x00;   //清0地址高字节
   19   1        IAP_ADDRL = 0x00;   //清0地址低字节，指向非EEPROM区，防止误操作
   20   1      }
   21          //========================================================================
   22          // 函数: void EEPROM_read_n(u16 EE_address,u8 *DataAddress,u16 number)
   23          // 描述: 从指定EEPROM首地址读出n个字节放指定的缓冲.
   24          // 参数: EE_address:  读出EEPROM的首地址.
   25          //       DataAddress: 读出数据放缓冲的首地址.
   26          //       number:      读出的字节长度.
   27          // 返回: non.
   28          // 版本: V1.0, 2012-10-22
   29          //========================================================================
   30          void EEPROM_read_n(unsigned int EE_address, unsigned char *DataAddress, unsigned int number)
   31          {
   32   1        F0 = EA;
   33   1        EA = 0;   //禁止中断
   34   1        IAP_CONTR = ENABLE_IAP;
   35   1        IAP_TPS = 35;
   36   1        IAP_CMD   = CMD_READ;
   37   1        do
   38   1        {
   39   2          IAP_ADDRL = EE_address;       //送地址低字节
   40   2          IAP_ADDRH = EE_address >> 8;  //送地址高字节（地址需要改变时才需重新送地址）
   41   2          IAP_ADDRE = 0x00;
   42   2          IAP_TRIG  = 0x5a; IAP_TRIG  = 0xa5;
   43   2          _nop_();
   44   2          _nop_();
   45   2          _nop_();
   46   2          _nop_();
   47   2          *DataAddress = IAP_DATA;      //读出的数据送往
   48   2          EE_address++;
   49   2          DataAddress++;
   50   2        }while(--number);
   51   1      
   52   1        DisableEEPROM();
   53   1        EA = F0;    //重新允许中断
   54   1      }
   55          /******************** 扇区擦除函数 *****************/
   56          //========================================================================
   57          // 函数: void EEPROM_SectorErase(u16 EE_address)
C251 COMPILER V5.60.0,  EEPROM                                                             23/08/22  22:51:19  PAGE 2   

   58          // 描述: 把指定地址的EEPROM扇区擦除.
   59          // 参数: EE_address:  要擦除的扇区EEPROM的地址.
   60          // 返回: non.
   61          // 版本: V1.0, 2013-5-10
   62          //========================================================================
   63          void EEPROM_SectorErase(unsigned int EE_address)
   64          {
   65   1        F0 = EA;
   66   1        EA = 0;   //禁止中断
   67   1        IAP_CONTR = ENABLE_IAP;
   68   1        IAP_TPS = 35;
   69   1        IAP_CMD   = CMD_ERASE;
   70   1        IAP_ADDRL = EE_address;       //送扇区地址低字节
   71   1        IAP_ADDRH = EE_address >> 8;  //送扇区地址高字节（地址需要改变时才需重新送地址）
   72   1        IAP_ADDRE = 0x00;
   73   1        IAP_TRIG  = 0x5a; IAP_TRIG  = 0xa5;
   74   1        _nop_();
   75   1        _nop_();
   76   1        _nop_();
   77   1        _nop_();
   78   1        DisableEEPROM();
   79   1        EA = F0;    //重新允许中断
   80   1      }
   81          
   82          //========================================================================
   83          // 函数: void EEPROM_write_n(u16 EE_address,u8 *DataAddress,u16 number)
   84          // 描述: 把缓冲的n个字节写入指定首地址的EEPROM.
   85          // 参数: EE_address:  写入EEPROM的首地址.
   86          //       DataAddress: 写入源数据的缓冲的首地址.
   87          //       number:      写入的字节长度.
   88          // 返回: non.
   89          // 版本: V1.0, 2012-10-22
   90          //========================================================================
   91          void EEPROM_write_n(unsigned int EE_address,unsigned char *DataAddress,unsigned int number)
   92          {
   93   1        F0 = EA;
   94   1        EA = 0;   //禁止中断
   95   1        IAP_CONTR = ENABLE_IAP;
   96   1        IAP_TPS = 35;
   97   1        IAP_CMD   = CMD_PROGRAM;
   98   1        do
   99   1        {
  100   2          IAP_ADDRL = EE_address;       //送地址低字节
  101   2          IAP_ADDRH = EE_address >> 8;  //送地址高字节（地址需要改变时才需重新送地址）
  102   2          IAP_ADDRE = 0x00;
  103   2          IAP_DATA  = *DataAddress;     //送数据到IAP_DATA，只有数据改变时才需重新送
  104   2          IAP_TRIG  = 0x5a; IAP_TRIG  = 0xa5;
  105   2          _nop_();
  106   2          _nop_();
  107   2          _nop_();
  108   2          _nop_();
  109   2          EE_address++;
  110   2          DataAddress++;
  111   2        }while(--number);
  112   1        DisableEEPROM();
  113   1        EA = F0;    //重新允许中断
  114   1      }
  115          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       196     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
C251 COMPILER V5.60.0,  EEPROM                                                             23/08/22  22:51:19  PAGE 3   

  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
