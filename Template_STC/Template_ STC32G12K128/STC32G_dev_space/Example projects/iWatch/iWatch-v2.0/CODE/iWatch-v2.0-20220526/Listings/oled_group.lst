C251 COMPILER V5.60.0,  oled_group                                                         23/08/22  22:51:17  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE oled_group
OBJECT MODULE PLACED IN .\Objects\oled_group.obj
COMPILER INVOKED BY: D:\Application\keilC251_v560\C251\BIN\C251.EXE User\oled_gui\oled_core\oled_group.c XSMALL ROM(HUGE
                    -) OPTIMIZE(8,SPEED) BROWSE INCDIR(.\User;.\User\oled_gui;.\User\oled_gui\oled_core;.\User\oled_gui\oled_widget;.\User\Pa
                    -geManage;.\User\Sensor;.\User\System;.\User\Bluetooth) DEBUG PRINT(.\Listings\oled_group.lst) TABS(2) OBJECT(.\Objects\o
                    -led_group.obj) 

stmt  level    source

    1          #define _OLED_GROUP_C
    2          #include "oled_group.h"
    3          #include "stdio.h"
    4          
    5          t_psGroup og_group_create(unsigned char i)
    6          {
    7   1        t_psGroup pGroup = malloc(T_SGROUP_SIZE + (i - 1) * T_SGROUPITEM_SIZE);
    8   1        #ifdef OLED_DEBUG
                 if(pGroup == NULL)
                 {
                   OG_PRINTERROR("group create fail");
                   return NULL;
                 }
                 #endif
   15   1        pGroup->ucSum = 0;
   16   1        pGroup->focus_index = -1;
   17   1        return pGroup;
   18   1      }
   19          void og_group_addWidget(t_psGroup pGroup, t_psWidget pWidget, uint8_t focus_en)
   20          {
   21   1        t_sGroupItem *pItem = &pGroup->item;
   22   1        #ifdef OLED_DEBUG
                 if(pWidget == NULL)
                 {
                   OG_PRINTERROR("try to add null widget to a group");
                   return;
                 }
                 #endif
   29   1        pItem[pGroup->ucSum].pWidget = pWidget;
   30   1        pItem[pGroup->ucSum].focus_en = focus_en;
   31   1        if(focus_en && (pGroup->focus_index == -1))
   32   1        {
   33   2          pItem[pGroup->ucSum].pWidget->config |= WIDGET_FOCUS;
   34   2          pGroup->focus_index = pGroup->ucSum;
   35   2        }
   36   1        pGroup->ucSum++;
   37   1      }
   38          void og_group_setPosOffset(t_psGroup pGroup, int16_t delta_x, int16_t delta_y)
   39          {
   40   1        uint8_t i;
   41   1        t_sGroupItem *pItem = &pGroup->item;
   42   1        for(i = 0; i < pGroup->ucSum; i++)
   43   1        {
   44   2          og_widget_setPosOffset(pItem[i].pWidget, delta_x, delta_y);
   45   2        }
   46   1      }
   47          #if (OLED_USE_ANIM == 1)
   48          void og_group_addAnimOffset(t_psGroup pGroup, int16_t delta_x, int16_t delta_y, uint16_t duration, t_anim
             -_end_cb anim_end_cb)
   49          {
   50   1        uint8_t i;
   51   1        t_sGroupItem *pItem = &pGroup->item;
   52   1        for(i = 0; i < pGroup->ucSum; i++)
   53   1        {
   54   2          og_anim_create_offset(pItem[i].pWidget, delta_x, delta_y, duration, (i==(pGroup->ucSum-1)?anim_end_cb:A
             -NIM_NULL_CB));
C251 COMPILER V5.60.0,  oled_group                                                         23/08/22  22:51:17  PAGE 2   

   55   2        }
   56   1      }
   57          #endif
   58          void og_group_delet(t_psGroup pGroup)
   59          {
   60   1        uint8_t i;
   61   1        t_sGroupItem *pItem = &pGroup->item;
   62   1        for(i = 0; i < pGroup->ucSum; i++)
   63   1        {
   64   2          og_widget_delet(pItem[i].pWidget);
   65   2        }
   66   1        free(pGroup);
   67   1      }
   68          void og_group_focusWidget(t_psGroup pGroup, uint8_t direction)
   69          {
   70   1        t_psWidget pWidget;
   71   1        t_sGroupItem *pItem = &pGroup->item;
   72   1        int16_t i;
   73   1        int16_t bias_x, bias_y;
   74   1        if(pGroup == NULL || pGroup->ucSum == 0 || pGroup->focus_index == -1)
   75   1          return;
   76   1        i = pGroup->focus_index;
   77   1        pItem[i].pWidget->config &= ~WIDGET_FOCUS;
   78   1        if(direction == 1)
   79   1        {
   80   2          while(1)
   81   2          {
   82   3            if(pItem[++i].focus_en == 1)
   83   3            {
   84   4              pItem[i].pWidget->config |= WIDGET_FOCUS;
   85   4              break;
   86   4            }
   87   3            if(i == pGroup->ucSum)
   88   3              i = -1;
   89   3          }
   90   2        }
   91   1        else
   92   1        {
   93   2          while(1)
   94   2          {
   95   3            if(pItem[--i].focus_en == 1)
   96   3            {
   97   4              pItem[i].pWidget->config |= WIDGET_FOCUS;
   98   4              break;
   99   4            }
  100   3            if(i == -1)
  101   3              i = pGroup->ucSum;
  102   3          }
  103   2        }
  104   1        pGroup->focus_index = i;
  105   1        pWidget = pItem[i].pWidget;
  106   1        if(pWidget->x < 0)
  107   1          bias_x = -pWidget->x;
  108   1        else if((pWidget->x + pWidget->w) > OLED_WIDTH)
  109   1          bias_x = -(pWidget->x + pWidget->w - OLED_WIDTH);
  110   1        else
  111   1          bias_x = 0;
  112   1        if(pWidget->y < 0)
  113   1          bias_y = -pWidget->y;
  114   1        else if((pWidget->y + pWidget->h) > OLED_HEIGHT)
  115   1          bias_y = -(pWidget->y + pWidget->h - OLED_HEIGHT);
  116   1        else
  117   1          bias_y = 0;
  118   1        if(bias_x != 0 || bias_y != 0)
  119   1        {
  120   2          #if OLED_USE_ANIM == 1
C251 COMPILER V5.60.0,  oled_group                                                         23/08/22  22:51:17  PAGE 3   

  121   2          og_group_addAnimOffset(pGroup, bias_x , bias_y, ANIM_TIME_NORM, ANIM_NULL_CB);
  122   2          #else
                   og_group_setPosOffset(pGroup, bias_x , bias_y);
                   #endif
  125   2        }
  126   1      }
  127          t_psWidget og_group_getFocusWidget(t_psGroup pGroup)
  128          {
  129   1        t_sGroupItem *pItem = &pGroup->item;
  130   1        #ifdef OLED_DEBUG
                 if(pGroup == NULL || pGroup->ucSum == 0 || pGroup->focus_index == -1)
                 {
                   OG_PRINTERROR("no widget is being focused");
                   return NULL;
                 }
                 #endif
  137   1        return pItem[pGroup->focus_index].pWidget;
  138   1      }
  139          int16_t og_group_getFocusIndex(t_psGroup pGroup)
  140          {
  141   1        return pGroup->focus_index;
  142   1      }
  143          void og_group_hideOffScreenWidget(t_psGroup pGroup)
  144          {
  145   1        uint8_t i;
  146   1        t_sGroupItem *pItem = &pGroup->item;
  147   1        t_psWidget pWidget;
  148   1        if(pGroup == NULL || pGroup->ucSum == 0)
  149   1          return;
  150   1        for(i = 0; i < pGroup->ucSum; i++)
  151   1        {
  152   2          pWidget = pItem[i].pWidget;
  153   2          if((pWidget->x >= OLED_WIDTH) || (pWidget->y >= OLED_HEIGHT))
  154   2            og_widget_setShow(pWidget, 0);
  155   2          else if((pWidget->x + pWidget->w) <= 0 || (pWidget->y + pWidget->h) <= 0)
  156   2            og_widget_setShow(pWidget, 0);
  157   2        }
  158   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       926     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------         40
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
