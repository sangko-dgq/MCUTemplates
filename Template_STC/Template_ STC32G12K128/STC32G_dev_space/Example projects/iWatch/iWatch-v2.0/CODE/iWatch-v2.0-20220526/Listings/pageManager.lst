C251 COMPILER V5.60.0,  pageManager                                                        22/09/22  11:45:02  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE pageManager
OBJECT MODULE PLACED IN .\Objects\pageManager.obj
COMPILER INVOKED BY: D:\Application\Keil_C251\C251\BIN\C251.EXE User\PageManage\pageManager.c XSMALL ROM(HUGE) OPTIMIZE(
                    -8,SPEED) BROWSE INCDIR(.\User;.\User\oled_gui;.\User\oled_gui\oled_core;.\User\oled_gui\oled_widget;.\User\PageManage;.\
                    -User\Sensor;.\User\System;.\User\Bluetooth) DEBUG PRINT(.\Listings\pageManager.lst) TABS(2) OBJECT(.\Objects\pageManager
                    -.obj) 

stmt  level    source

    1          #define __PAGE_C
    2          #include "pageManager.h"
    3          
    4          
    5          /**
    6            * @brief  提供页面时钟，每1毫秒调用一次
    7            * @param  无
    8            * @retval 无
    9            */
   10          void pageTick(void)
   11          {
   12   1        page_timestamp ++;
   13   1      }
   14          /**
   15            * @brief  在页面循环中通过查询此函数的结果来获得指定的执行频率
   16            * @param  执行频率相关的结构体指针
   17            * @retval 无
   18            */
   19          unsigned char pageExecuteRate(t_sPageRate *er)
   20          {
   21   1        if(page_timestamp - er->last_timestamp >= er->executeT)
   22   1        {
   23   2          er->last_timestamp = page_timestamp;
   24   2          return 1;
   25   2        }
   26   1        else
   27   1          return 0;
   28   1      }
   29          /**
   30            * @brief  注册一个基本页面，包含一个初始化函数，循环函数，退出函数，事件函数
   31            * @param  pageID: 页面编号
   32            * @param  pageText: 页面标题的指针
   33            * @param  pageIcon: 页面图标的指针
   34            * @param  setupCallback: 初始化函数回调
   35            * @param  loopCallback: 循环函数回调
   36            * @param  exitCallback: 退出函数回调
   37            * @param  eventCallback: 事件函数回调
   38            * @retval 无
   39            */
   40          void pageRegister(
   41              unsigned char pageID,
   42              unsigned char *pageTitle,
   43              unsigned char *pageIcon,
   44              t_fSteupCallback setupCallback,
   45              t_fLoopCallback loopCallback,
   46              t_fExitCallback exitCallback,
   47              t_fEventCallback eventCallback
   48          )
   49          {
   50   1          pagelist[pageID].Title = pageTitle;
   51   1          pagelist[pageID].Icon = pageIcon;
   52   1          pagelist[pageID].status = PAGE_IDLE;
   53   1          pagelist[pageID].SetupCallback = setupCallback;
   54   1          pagelist[pageID].LoopCallback = loopCallback;
   55   1          pagelist[pageID].ExitCallback = exitCallback;
   56   1          pagelist[pageID].EventCallback = eventCallback;
C251 COMPILER V5.60.0,  pageManager                                                        22/09/22  11:45:02  PAGE 2   

   57   1      }
   58          /**
   59            * @brief  页面事件传递
   60            * @param  event: 事件编号
   61            * @retval 无
   62            */
   63          void pageEventTransmit(unsigned char event)
   64          {
   65   1        /*将事件传递到当前页面*/
   66   1        if((pagelist[now_page].EventCallback != 0) && (pagelist[now_page].status == PAGE_RUN))
   67   1          pagelist[now_page].EventCallback(event);
   68   1      }
   69          void pageOpenCurrentPage()
   70          {
   71   1        if(pagelist[now_page].status == PAGE_IDLE)
   72   1        {
   73   2          pagelist[now_page].SetupCallback(PAGE_ENTER);
   74   2          pagelist[now_page].status = PAGE_RUN;
   75   2        }
   76   1      }
   77          void pageCloseCurrentPage()
   78          {
   79   1        if(pagelist[now_page].status == PAGE_RUN)
   80   1          pagelist[now_page].ExitCallback(PAGE_RETURN);
   81   1      }
   82          /**
   83            * @brief  页面切换
   84            * @param  pageID：页面号
   85            * @retval 无
   86            */
   87          void pageShift(unsigned char pageID, unsigned char condition)
   88          {
   89   1        if((now_page != pageID) && (pagelist[pageID].status == PAGE_IDLE))
   90   1        {
   91   2          if(pagelist[now_page].ExitCallback != 0)
   92   2          {
   93   3            pagelist[now_page].ExitCallback(condition);
   94   3          }
   95   2          now_page = pageID;
   96   2          if(pagelist[now_page].SetupCallback != 0)
   97   2          {
   98   3            pagelist[now_page].SetupCallback(condition);
   99   3            pagelist[now_page].status = PAGE_RUN;
  100   3          }
  101   2        }
  102   1      }
  103          
  104          /* 运行当前页面 */
  105          void pageRun(void)
  106          {
  107   1        pagelist[now_page].LoopCallback();
  108   1      }
  109          
  110          void pageSetStatus(unsigned char pageID, unsigned char status)
  111          {
  112   1        pagelist[pageID].status = status;
  113   1      }
  114          unsigned char pageGetStatus(void)
  115          {
  116   1        return pagelist[now_page].status;
  117   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       502     ------
C251 COMPILER V5.60.0,  pageManager                                                        22/09/22  11:45:02  PAGE 3   

  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       482         16
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        62     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
