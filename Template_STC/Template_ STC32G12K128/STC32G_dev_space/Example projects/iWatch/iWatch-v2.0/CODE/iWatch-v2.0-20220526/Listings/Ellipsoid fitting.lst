C251 COMPILER V5.60.0,  Ellipsoid fitting                                                  22/09/22  11:45:02  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE Ellipsoid fitting
OBJECT MODULE PLACED IN .\Objects\Ellipsoid fitting.obj
COMPILER INVOKED BY: D:\Application\Keil_C251\C251\BIN\C251.EXE User\Sensor\Ellipsoid fitting.c XSMALL ROM(HUGE) OPTIMIZ
                    -E(8,SPEED) BROWSE INCDIR(.\User;.\User\oled_gui;.\User\oled_gui\oled_core;.\User\oled_gui\oled_widget;.\User\PageManage;
                    -.\User\Sensor;.\User\System;.\User\Bluetooth) DEBUG PRINT(.\Listings\Ellipsoid fitting.lst) TABS(2) OBJECT(.\Objects\Ell
                    -ipsoid fitting.obj) 

stmt  level    source

    1          #include "Ellipsoid fitting.h"
    2          #include "stdio.h"
    3          #include "string.h"
    4          #include "math.h"
    5          
    6          #define MATRIX_SIZE 6
    7          float m_matrix[MATRIX_SIZE][MATRIX_SIZE + 1]; //系数矩阵
    8          float final_solve[MATRIX_SIZE] = {0};       //方程组的解对应最小二乘椭球拟合中的，a，b，c，d，e，f，
    9          float m_result[MATRIX_SIZE];
   10          int N = 0;//计算累计的采样点次数的
   11          
   12          //取绝对值
   13          float Abs(float a)
   14          {
   15   1        return a < 0 ? -a : a;
   16   1      }
   17          
   18          //把矩阵系数全部清除为0
   19          void ResetMatrix(void)
   20          {
   21   1        unsigned char row, column;
   22   1        for (row = 0; row < MATRIX_SIZE; row++)
   23   1        {
   24   2          for (column = 0; column < MATRIX_SIZE + 1; column++)
   25   2            m_matrix[row][column] = 0.0f;
   26   2        }
   27   1        N = 0;
   28   1      }
   29          
   30          //把输入的数据先生成矩阵的元素的总和
   31          void CalcData_Input(float x, float y, float z)
   32          {
   33   1        float V[MATRIX_SIZE + 1];
   34   1        unsigned char row, column;
   35   1        N++;
   36   1        V[0] = y*y;
   37   1        V[1] = z*z;
   38   1        V[2] = x;
   39   1        V[3] = y;
   40   1        V[4] = z;
   41   1        V[5] = 1.0;
   42   1        V[6] = -x*x;
   43   1        //构建系数矩阵，并进行累加
   44   1        for (row = 0; row < MATRIX_SIZE; row++)
   45   1        {
   46   2          for (column = 0; column < MATRIX_SIZE + 1; column++)
   47   2          {
   48   3            m_matrix[row][column] += V[row] * V[column];
   49   3          }
   50   2        }
   51   1        //b向量是m_matrix[row][6]
   52   1      }
   53          
   54          //化简系数矩阵，把除以N带上
   55          void CalcData_Input_average()
   56          {
C251 COMPILER V5.60.0,  Ellipsoid fitting                                                  22/09/22  11:45:02  PAGE 2   

   57   1        unsigned char row, column;
   58   1        for (row = 0; row < MATRIX_SIZE; row++)
   59   1          for (column = 0; column < MATRIX_SIZE + 1; column++)
   60   1            m_matrix[row][column] /= N;
   61   1        //b向量是m_matrix[row][6]
   62   1      }
   63          //显示出来系数矩阵和增广矩阵[A|b]
   64          /*
   65          void DispMatrix(void)
   66          {
   67            unsigned char row, column;
   68            for (row = 0; row < MATRIX_SIZE; row++)
   69            {
   70              for (column = 0; column < MATRIX_SIZE + 1; column++)
   71              {
   72                printf("%23f ", m_matrix[row][column]);
   73                if (column == MATRIX_SIZE - 1)
   74                  printf("|");
   75              }
   76              printf("\r\n");
   77            }
   78            printf("\r\n\r\n");
   79          }
   80          */
   81          //交换两行元素位置
   82          void Row2_swop_Row1(int row1, int row2)
   83          {
   84   1        float tmp = 0;
   85   1        unsigned char column;
   86   1        for (column = 0; column < MATRIX_SIZE + 1; column++)
   87   1        {
   88   2          tmp = m_matrix[row1][column];
   89   2          m_matrix[row1][column] = m_matrix[row2][column];
   90   2          m_matrix[row2][column] = tmp;
   91   2        }
   92   1      }
   93          
   94          //用把row行的元素乘以一个系数k
   95          void k_muiltply_Row(float k, int row)
   96          {
   97   1        unsigned char column;
   98   1        for (column = 0; column < MATRIX_SIZE + 1; column++)
   99   1          m_matrix[row][column] *= k;
  100   1      }
  101          
  102          //用一个数乘以row1行加到row2行上去
  103          void Row2_add_kRow1(float k, int row1, int row2)
  104          {
  105   1        unsigned char column;
  106   1        for (column = 0; column < MATRIX_SIZE + 1; column++)
  107   1          m_matrix[row2][column] += k*m_matrix[row1][column];
  108   1      }
  109          
  110          
  111          //列主元，第k次消元之前，把k行到MATRIX_SIZE的所有行进行冒泡排出最大，排序的依据是k列的元素的大小
  112          void MoveBiggestElement_to_Top(int k)
  113          {
  114   1        int row = 0, column = 0;
  115   1        for (row = k + 1; row < MATRIX_SIZE; row++)
  116   1        {
  117   2          if (Abs(m_matrix[k][k]) < Abs(m_matrix[row][k]))
  118   2          {
  119   3            Row2_swop_Row1(k, row);
  120   3          }
  121   2        }
  122   1      }
C251 COMPILER V5.60.0,  Ellipsoid fitting                                                  22/09/22  11:45:02  PAGE 3   

  123          
  124          //高斯消元法，求行阶梯型矩阵
  125          unsigned char Matrix_GaussElimination(void)
  126          {
  127   1        float k = 0;
  128   1        unsigned char cnt,row;
  129   1        for (cnt = 0; cnt < MATRIX_SIZE; cnt++)//进行第k次的运算，主要是针对k行以下的行数把k列的元素都变成0
  130   1        {
  131   2          //把k行依据k列的元素大小，进行排序
  132   2          MoveBiggestElement_to_Top(cnt);
  133   2          if (m_matrix[cnt][cnt] == 0)
  134   2            return(1);      //返回值表示错误
  135   2          //把k行下面的行元素全部消成0，整行变化
  136   2          for (row = cnt + 1; row < MATRIX_SIZE; row++)
  137   2          {
  138   3            k = -m_matrix[row][cnt] / m_matrix[cnt][cnt];
  139   3            Row2_add_kRow1(k, cnt, row);
  140   3          }
  141   2          //DispMatrix();
  142   2        }
  143   1        return 0;
  144   1      }
  145          
  146          //求行最简型矩阵，即把对角线的元素全部化成1
  147          void Matrix_RowSimplify(void)
  148          {
  149   1        float k = 0;
  150   1        unsigned char row;
  151   1        for (row = 0; row < MATRIX_SIZE; row++)
  152   1        {
  153   2          k = 1 / m_matrix[row][row];
  154   2          k_muiltply_Row(k, row);
  155   2        }
  156   1        //DispMatrix();
  157   1      }
  158          
  159          //求非齐次线性方程组的解
  160          void Matrix_Solve(float *solve)
  161          {
  162   1        long row;
  163   1        unsigned char column;
  164   1        for (row = MATRIX_SIZE - 1; row >= 0; row--)
  165   1        {
  166   2          solve[row] = m_matrix[row][MATRIX_SIZE];
  167   2          for (column = MATRIX_SIZE - 1; column >= row + 1; column--)
  168   2            solve[row] -= m_matrix[row][column] * solve[column];
  169   2        }
  170   1        //printf("  a = %.3f| b = %.3f| c = %.3f| d = %.3f| e = %.3f| f = %.3f ", solve[0], solve[1], solve[2], 
             -solve[3], solve[4], solve[5]);
  171   1        //printf("\r\n");
  172   1        //printf("\r\n");
  173   1      }
  174          
  175          //整个椭球校准的过程
  176          unsigned char Ellipsoid_fitting_Process(tsCaliData *dat)
  177          {
  178   1        float a = 0, b = 0, c = 0, d = 0, e = 0, f = 0;
  179   1        float X0 = 0, Y0 = 0, Z0 = 0, A = 0, B = 0, C = 0;
  180   1        //ResetMatrix();
  181   1        //这里输入任意个点加速度参数，尽量在球面上均匀分布
  182   1        /*
  183   1        CalcData_Input(87, -52, -4454);
  184   1        CalcData_Input(301, -45, 3859);
  185   1        CalcData_Input(274, 4088, -303);
  186   1        CalcData_Input(312, -4109, -305);
  187   1        CalcData_Input(-3805, -24, -390);
C251 COMPILER V5.60.0,  Ellipsoid fitting                                                  22/09/22  11:45:02  PAGE 4   

  188   1        CalcData_Input(4389, 6, -228);
  189   1        CalcData_Input(261, 2106, -3848);
  190   1        CalcData_Input(327, -2047, -3880);
  191   1        CalcData_Input(-1963, -13, -3797);
  192   1        CalcData_Input(3024, 18, -3449);
  193   1        */
  194   1        CalcData_Input_average();       //对输入的数据到矩阵元素进行归一化
  195   1        //DispMatrix();                   //显示原始的增广矩阵
  196   1        if (Matrix_GaussElimination())  //求得行阶梯形矩阵
  197   1        {
  198   2          printf("the marix could not be solved\r\n");
  199   2          return 0;
  200   2        }
  201   1        else
  202   1        {
  203   2          Matrix_RowSimplify();       //化行最简形态
  204   2          Matrix_Solve(final_solve);  //求解a,b,c,d,e,f
  205   2          a = final_solve[0];
  206   2          b = final_solve[1];
  207   2          c = final_solve[2];
  208   2          d = final_solve[3];
  209   2          e = final_solve[4];
  210   2          f = final_solve[5];
  211   2      
  212   2          X0 = -c / 2;
  213   2          Y0 = -d / (2 * a);
  214   2          Z0 = -e / (2 * b);
  215   2          A = sqrt(X0*X0 + a*Y0*Y0 + b*Z0*Z0 - f);
  216   2          B = A / sqrt(a);
  217   2          C = A / sqrt(b);
  218   2          
  219   2          dat->X0 = X0;
  220   2          dat->Y0 = Y0;
  221   2          dat->Z0 = Z0;
  222   2          dat->A = A;
  223   2          dat->B = B;
  224   2          dat->C = C;
  225   2          /*
  226   2          printf("((x - x0) / A) ^ 2 + ((y - y0) / B) ^ 2 + ((z - z0) / C) ^ 2 = 1 Ellipsoid result as below：\r\
             -n");
  227   2          printf("\r\n");
  228   2          printf("X0 = %.3f| Y0 = %.3f| Z0 = %.3f| A = %.3f| B = %.3f| C = %.3f \r\n", X0, Y0, Z0, A, B, C);
  229   2          */
  230   2          return 1;
  231   2        }
  232   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =      1239     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       218         72
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        66     ------
End of Module Information.

C251 COMPILER V5.60.0,  Ellipsoid fitting                                                  22/09/22  11:45:02  PAGE 5   


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
