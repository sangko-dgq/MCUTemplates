C251 COMPILER V5.60.0,  RX8130CE                                                           22/09/22  11:45:01  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE RX8130CE
OBJECT MODULE PLACED IN .\Objects\RX8130CE.obj
COMPILER INVOKED BY: D:\Application\Keil_C251\C251\BIN\C251.EXE User\RX8130CE.c XSMALL ROM(HUGE) OPTIMIZE(8,SPEED) BROWS
                    -E INCDIR(.\User;.\User\oled_gui;.\User\oled_gui\oled_core;.\User\oled_gui\oled_widget;.\User\PageManage;.\User\Sensor;.\
                    -User\System;.\User\Bluetooth) DEBUG PRINT(.\Listings\RX8130CE.lst) TABS(2) OBJECT(.\Objects\RX8130CE.obj) 

stmt  level    source

    1          #include "RX8130CE.h"
    2          #include "IIC.h"
    3          
    4          void RX8130RegSetBit(unsigned char addr, unsigned char mask, unsigned char sc)
    5          {
    6   1        unsigned char temp;
    7   1        temp = Single_ReadIIC(RX8130CE_IIC_ADDR, addr);
    8   1        if(sc)
    9   1          temp |= mask;
   10   1        else
   11   1          temp &= ~mask;
   12   1        Single_WriteIIC(RX8130CE_IIC_ADDR, addr, temp);
   13   1      }
   14          void RX8130CEReadTime(t_sRX8130CE *t)
   15          {
   16   1        unsigned char temp[7];
   17   1        unsigned char i = 0;
   18   1        I2C_Read_MultiBytes(RX8130CE_IIC_ADDR, 0x10, 7, temp);
   19   1        t->second = (temp[0] >> 4) * 10 + (temp[0] & 0x0f);
   20   1        t->minute = (temp[1] >> 4) * 10 + (temp[1] & 0x0f);
   21   1        t->hour = (temp[2] >> 4) * 10 + (temp[2] & 0x0f);
   22   1        if(temp[3] > 0x40)
   23   1          temp[3] = 0x40;
   24   1        while(temp[3] != 0x00)
   25   1        {
   26   2          temp[3] >>= 1;
   27   2          i++;
   28   2        }
   29   1        t->weekday = i;
   30   1        t->day = (temp[4] >> 4) * 10 + (temp[4] & 0x0f);
   31   1        t->month = (temp[5] >> 4) * 10 + (temp[5] & 0x0f);
   32   1        t->year = (temp[6] >> 4) * 10 + (temp[6] & 0x0f);
   33   1      }
   34          void RX8130CEWriteTime(t_sRX8130CE *t)
   35          {
   36   1        unsigned char temp[7];
   37   1        temp[0] = ((t->second / 10) << 4) | (t->second % 10);
   38   1        temp[1] = ((t->minute / 10) << 4) | (t->minute % 10);
   39   1        temp[2] = ((t->hour / 10) << 4) | (t->hour % 10);
   40   1        temp[3] = (0x01 << (t->weekday - 1));
   41   1        temp[4] = ((t->day / 10) << 4) | (t->day % 10);
   42   1        temp[5] = ((t->month / 10) << 4) | (t->month % 10);
   43   1        temp[6] = ((t->year / 10) << 4) | (t->year % 10);
   44   1        I2C_Write_MultiBytes(RX8130CE_IIC_ADDR, 0x10, 7, temp);
   45   1      }
   46          void RX8130CESetAlarm(t_sAlarm *a)
   47          {
   48   1        unsigned char alarm_hour, alarm_minute, alarm_week_day;
   49   1        alarm_hour = ((a->hour / 10) << 4) | (a->hour % 10);
   50   1        alarm_minute = ((a->minute / 10) << 4) | (a->minute % 10);
   51   1        if(a->mode == ALARM_EVERYDAY || a->mode == ALARM_ONCE)
   52   1        {
   53   2          alarm_week_day = 0x80;
   54   2        }
   55   1        else if(a->mode == ALARM_WORKDAY)
   56   1        {
   57   2          alarm_week_day = 0x1f;
C251 COMPILER V5.60.0,  RX8130CE                                                           22/09/22  11:45:01  PAGE 2   

   58   2          RX8130RegSetBit(0x1C, 0x08, 0);   //clear WADA
   59   2        }
   60   1        else if(a->mode == ALARM_SPECIFIC_DAY)
   61   1        {
   62   2          alarm_week_day = ((a->day / 10) << 4) | (a->day % 10);
   63   2          RX8130RegSetBit(0x1C, 0x08, 1);   //set WADA
   64   2        }
   65   1        Single_WriteIIC(RX8130CE_IIC_ADDR, 0x17, alarm_minute);
   66   1        Single_WriteIIC(RX8130CE_IIC_ADDR, 0x18, alarm_hour);
   67   1        Single_WriteIIC(RX8130CE_IIC_ADDR, 0x19, alarm_week_day);
   68   1        RX8130RegSetBit(0x1E, 0x08, 1);   //set AIE
   69   1        RX8130RegSetBit(0x1D, 0x08, 0);   //clear AF
   70   1      }
   71          void RX8130CEAlarmHandle(t_sAlarm *a)
   72          {
   73   1        if(a->mode == ALARM_ONCE)
   74   1        {
   75   2          RX8130CEDisableAlarm();
   76   2          a->mode = ALARM_DISABLE;
   77   2        }
   78   1      }
   79          void RX8130CEClearAlarmFlag(void)
   80          {
   81   1        RX8130RegSetBit(0x1D, 0x08, 0);
   82   1      }
   83          void RX8130CEDisableAlarm(void)
   84          {
   85   1        Single_WriteIIC(RX8130CE_IIC_ADDR, 0x17, 0x80);
   86   1        Single_WriteIIC(RX8130CE_IIC_ADDR, 0x18, 0x80);
   87   1        Single_WriteIIC(RX8130CE_IIC_ADDR, 0x19, 0x80);
   88   1        RX8130RegSetBit(0x1E, 0x08, 0);   //set AIE
   89   1        RX8130RegSetBit(0x1D, 0x08, 0);   //clear AF
   90   1      }
   91          void RX8130CESetTimer(unsigned char timer_clk, unsigned int down_cnt_value)
   92          {
   93   1        //clear TE bit first
   94   1        RX8130RegSetBit(0x1C, 0x10, 0);
   95   1        //Set timer counter 0,1
   96   1        Single_WriteIIC(RX8130CE_IIC_ADDR, 0x1A, down_cnt_value);
*** WARNING C188 IN LINE 96 OF User\RX8130CE.c: 'parameter 3': value truncated
   97   1        Single_WriteIIC(RX8130CE_IIC_ADDR, 0x1B, down_cnt_value >> 8);
*** WARNING C188 IN LINE 97 OF User\RX8130CE.c: 'parameter 3': value truncated
   98   1        //clear TF bit
   99   1        RX8130RegSetBit(0x1D, 0x10, 0);
  100   1        //set TIE bit, enable timer interrupt
  101   1        RX8130RegSetBit(0x1E, 0xC7, 0); //clear TEST,STOP,TSTP,TBKON,TBKN bits
  102   1        RX8130RegSetBit(0x1E, 0x10, 1); //set TIE bit
  103   1        //set TE bit and timer source clock
  104   1        RX8130RegSetBit(0x1C, 0x07, 0); //clear TSEL2,TSEL1,TSEL0 bits
  105   1        RX8130RegSetBit(0x1C, 0x10, 1); //set TE bit
  106   1        RX8130RegSetBit(0x1C, timer_clk, 1);  //set timer source clock
  107   1      }
  108          void RX8130CEClearTimerFlag(void)
  109          {
  110   1        RX8130RegSetBit(0x1D, 0x10, 0);
  111   1      }
  112          
  113          void RX8130CEDisableTimer(void)
  114          {
  115   1        //clear TE bit
  116   1        RX8130RegSetBit(0x1C, 0x10, 0);
  117   1        //clear TIE bit, disable timer interrupt
  118   1        RX8130RegSetBit(0x1E, 0x10, 0);
  119   1      }
  120          void RX8130CESetClockOuput(unsigned char clock_fq)
  121          {
C251 COMPILER V5.60.0,  RX8130CE                                                           22/09/22  11:45:01  PAGE 3   

  122   1        RX8130RegSetBit(0x1C, 0xC0, 0);
  123   1        RX8130RegSetBit(0x1C, (clock_fq << 6), 1);  
  124   1      }
  125          unsigned char RX8130CEReadIntSrc(void)
  126          {
  127   1        unsigned char temp;
  128   1        temp = Single_ReadIIC(RX8130CE_IIC_ADDR, 0x1D);
  129   1        return (temp & 0x18);
  130   1      }
  131          void RX8130CEInit(void)
  132          {
  133   1        RX8130CESetClockOuput(CLKOUT_DISABLE);
  134   1        RX8130CEClearTimerFlag();
  135   1        RX8130CEClearAlarmFlag();
  136   1        RX8130CESetTimer(TIMERCLK_1_60HZ, 1);
  137   1        //RX8130CEDisableTimer();
  138   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =      1007     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------         15
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
